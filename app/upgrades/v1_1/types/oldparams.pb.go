// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/upgrades/v1beta1/oldparams.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the bundles module parameters.
type OldBundlesParams struct {
	// upload_timeout ...
	UploadTimeout uint64 `protobuf:"varint,1,opt,name=upload_timeout,json=uploadTimeout,proto3" json:"upload_timeout,omitempty"`
	// storage_cost ...
	StorageCost github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=storage_cost,json=storageCost,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"storage_cost"`
	// network_fee ...
	NetworkFee string `protobuf:"bytes,3,opt,name=network_fee,json=networkFee,proto3" json:"network_fee,omitempty"`
	// max_points ...
	MaxPoints uint64 `protobuf:"varint,4,opt,name=max_points,json=maxPoints,proto3" json:"max_points,omitempty"`
}

func (m *OldBundlesParams) Reset()         { *m = OldBundlesParams{} }
func (m *OldBundlesParams) String() string { return proto.CompactTextString(m) }
func (*OldBundlesParams) ProtoMessage()    {}
func (*OldBundlesParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebf316cc66ac0646, []int{0}
}
func (m *OldBundlesParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OldBundlesParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OldBundlesParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OldBundlesParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OldBundlesParams.Merge(m, src)
}
func (m *OldBundlesParams) XXX_Size() int {
	return m.Size()
}
func (m *OldBundlesParams) XXX_DiscardUnknown() {
	xxx_messageInfo_OldBundlesParams.DiscardUnknown(m)
}

var xxx_messageInfo_OldBundlesParams proto.InternalMessageInfo

func (m *OldBundlesParams) GetUploadTimeout() uint64 {
	if m != nil {
		return m.UploadTimeout
	}
	return 0
}

func (m *OldBundlesParams) GetNetworkFee() string {
	if m != nil {
		return m.NetworkFee
	}
	return ""
}

func (m *OldBundlesParams) GetMaxPoints() uint64 {
	if m != nil {
		return m.MaxPoints
	}
	return 0
}

// Params defines the delegation module parameters.
type OldDelegationParams struct {
	// unbonding_delegation_time ...
	UnbondingDelegationTime uint64 `protobuf:"varint,1,opt,name=unbonding_delegation_time,json=unbondingDelegationTime,proto3" json:"unbonding_delegation_time,omitempty"`
	// unbonding_delegation_time ...
	RedelegationCooldown uint64 `protobuf:"varint,2,opt,name=redelegation_cooldown,json=redelegationCooldown,proto3" json:"redelegation_cooldown,omitempty"`
	// unbonding_delegation_time ...
	RedelegationMaxAmount uint64 `protobuf:"varint,3,opt,name=redelegation_max_amount,json=redelegationMaxAmount,proto3" json:"redelegation_max_amount,omitempty"`
	// vote_slash ...
	VoteSlash string `protobuf:"bytes,4,opt,name=vote_slash,json=voteSlash,proto3" json:"vote_slash,omitempty"`
	// upload_slash ...
	UploadSlash string `protobuf:"bytes,5,opt,name=upload_slash,json=uploadSlash,proto3" json:"upload_slash,omitempty"`
	// timeout_slash ...
	TimeoutSlash string `protobuf:"bytes,6,opt,name=timeout_slash,json=timeoutSlash,proto3" json:"timeout_slash,omitempty"`
}

func (m *OldDelegationParams) Reset()         { *m = OldDelegationParams{} }
func (m *OldDelegationParams) String() string { return proto.CompactTextString(m) }
func (*OldDelegationParams) ProtoMessage()    {}
func (*OldDelegationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebf316cc66ac0646, []int{1}
}
func (m *OldDelegationParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OldDelegationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OldDelegationParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OldDelegationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OldDelegationParams.Merge(m, src)
}
func (m *OldDelegationParams) XXX_Size() int {
	return m.Size()
}
func (m *OldDelegationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_OldDelegationParams.DiscardUnknown(m)
}

var xxx_messageInfo_OldDelegationParams proto.InternalMessageInfo

func (m *OldDelegationParams) GetUnbondingDelegationTime() uint64 {
	if m != nil {
		return m.UnbondingDelegationTime
	}
	return 0
}

func (m *OldDelegationParams) GetRedelegationCooldown() uint64 {
	if m != nil {
		return m.RedelegationCooldown
	}
	return 0
}

func (m *OldDelegationParams) GetRedelegationMaxAmount() uint64 {
	if m != nil {
		return m.RedelegationMaxAmount
	}
	return 0
}

func (m *OldDelegationParams) GetVoteSlash() string {
	if m != nil {
		return m.VoteSlash
	}
	return ""
}

func (m *OldDelegationParams) GetUploadSlash() string {
	if m != nil {
		return m.UploadSlash
	}
	return ""
}

func (m *OldDelegationParams) GetTimeoutSlash() string {
	if m != nil {
		return m.TimeoutSlash
	}
	return ""
}

func init() {
	proto.RegisterType((*OldBundlesParams)(nil), "kyve.upgrades.v1beta1.OldBundlesParams")
	proto.RegisterType((*OldDelegationParams)(nil), "kyve.upgrades.v1beta1.OldDelegationParams")
}

func init() {
	proto.RegisterFile("kyve/upgrades/v1beta1/oldparams.proto", fileDescriptor_ebf316cc66ac0646)
}

var fileDescriptor_ebf316cc66ac0646 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0x87, 0xe3, 0x12, 0x2a, 0x65, 0x93, 0x22, 0x64, 0x5a, 0x35, 0x20, 0xe1, 0x94, 0xa2, 0xa2,
	0x5e, 0xb0, 0x15, 0x15, 0x71, 0xe0, 0x46, 0x5a, 0xb8, 0x20, 0xda, 0x62, 0x10, 0x12, 0x5c, 0xac,
	0x8d, 0x77, 0x70, 0xac, 0xac, 0x77, 0x56, 0xde, 0x75, 0x9a, 0xbe, 0x05, 0x2f, 0xc1, 0xbb, 0xf4,
	0xc0, 0xa1, 0x47, 0xc4, 0xa1, 0x42, 0xc9, 0x8b, 0xa0, 0xfd, 0x43, 0x49, 0x4e, 0xb6, 0x7e, 0xf3,
	0xcd, 0x68, 0xbf, 0x9d, 0x25, 0x07, 0xd3, 0xcb, 0x19, 0x24, 0x8d, 0x2c, 0x6a, 0xca, 0x40, 0x25,
	0xb3, 0xe1, 0x18, 0x34, 0x1d, 0x26, 0xc8, 0x99, 0xa4, 0x35, 0xad, 0x54, 0x2c, 0x6b, 0xd4, 0x18,
	0xee, 0x18, 0x2c, 0xfe, 0x87, 0xc5, 0x1e, 0x7b, 0xb4, 0x5d, 0x60, 0x81, 0x96, 0x48, 0xcc, 0x9f,
	0x83, 0xf7, 0x7f, 0x06, 0xe4, 0xfe, 0x19, 0x67, 0xa3, 0x46, 0x30, 0x0e, 0xea, 0xdc, 0xce, 0x09,
	0x0f, 0xc8, 0xbd, 0x46, 0x72, 0xa4, 0x2c, 0xd3, 0x65, 0x05, 0xd8, 0xe8, 0x7e, 0xb0, 0x17, 0x1c,
	0xb6, 0xd3, 0x2d, 0x97, 0x7e, 0x72, 0x61, 0xf8, 0x81, 0xf4, 0x94, 0xc6, 0x9a, 0x16, 0x90, 0xe5,
	0xa8, 0x74, 0x7f, 0x63, 0x2f, 0x38, 0xec, 0x8c, 0xe2, 0xab, 0x9b, 0x41, 0xeb, 0xf7, 0xcd, 0xe0,
	0x59, 0x51, 0xea, 0x49, 0x33, 0x8e, 0x73, 0xac, 0x92, 0x1c, 0x55, 0x85, 0xca, 0x7f, 0x9e, 0x2b,
	0x36, 0x4d, 0xf4, 0xa5, 0x04, 0x15, 0x9f, 0x40, 0x9e, 0x76, 0xfd, 0x8c, 0x63, 0x54, 0x3a, 0x1c,
	0x90, 0xae, 0x00, 0x7d, 0x81, 0xf5, 0x34, 0xfb, 0x06, 0xd0, 0xbf, 0x63, 0x26, 0xa6, 0xc4, 0x47,
	0x6f, 0x01, 0xc2, 0xc7, 0x84, 0x54, 0x74, 0x9e, 0x49, 0x2c, 0x85, 0x56, 0xfd, 0xb6, 0x3d, 0x56,
	0xa7, 0xa2, 0xf3, 0x73, 0x1b, 0xec, 0xff, 0xd8, 0x20, 0x0f, 0xce, 0x38, 0x3b, 0x01, 0x0e, 0x05,
	0xd5, 0x25, 0x0a, 0x6f, 0xf4, 0x8a, 0x3c, 0x6c, 0xc4, 0x18, 0x05, 0x2b, 0x45, 0x91, 0xb1, 0xdb,
	0xaa, 0xf5, 0xf3, 0x72, 0xbb, 0xb7, 0xc0, 0xff, 0x6e, 0x63, 0x1a, 0x1e, 0x91, 0x9d, 0x1a, 0x56,
	0x7a, 0x72, 0x44, 0xce, 0xf0, 0x42, 0x58, 0xdf, 0x76, 0xba, 0xbd, 0x5a, 0x3c, 0xf6, 0xb5, 0xf0,
	0x25, 0xd9, 0x5d, 0x6b, 0x32, 0x87, 0xa6, 0x15, 0x36, 0x42, 0x5b, 0xa9, 0x76, 0xba, 0x36, 0xf3,
	0x3d, 0x9d, 0xbf, 0xb6, 0x45, 0xe3, 0x37, 0x43, 0x0d, 0x99, 0xe2, 0x54, 0x4d, 0xac, 0x5f, 0x27,
	0xed, 0x98, 0xe4, 0xa3, 0x09, 0xc2, 0x27, 0xa4, 0xe7, 0x37, 0xe3, 0x80, 0xbb, 0x16, 0xe8, 0xba,
	0xcc, 0x21, 0x4f, 0xc9, 0x96, 0xdf, 0x9a, 0x67, 0x36, 0x2d, 0xd3, 0xf3, 0xa1, 0x85, 0x46, 0xa7,
	0x57, 0x8b, 0x28, 0xb8, 0x5e, 0x44, 0xc1, 0x9f, 0x45, 0x14, 0x7c, 0x5f, 0x46, 0xad, 0xeb, 0x65,
	0xd4, 0xfa, 0xb5, 0x8c, 0x5a, 0x5f, 0x5f, 0xac, 0xac, 0xed, 0xdd, 0x97, 0xcf, 0x6f, 0x4e, 0xdd,
	0xdd, 0x27, 0xf9, 0x84, 0x96, 0x22, 0xa1, 0x52, 0xae, 0x3e, 0xc0, 0x6c, 0xe8, 0x16, 0x39, 0xde,
	0xb4, 0xaf, 0xe9, 0xe8, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x60, 0x34, 0x56, 0xa3, 0x02,
	0x00, 0x00,
}

func (m *OldBundlesParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OldBundlesParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OldBundlesParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxPoints != 0 {
		i = encodeVarintOldparams(dAtA, i, uint64(m.MaxPoints))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NetworkFee) > 0 {
		i -= len(m.NetworkFee)
		copy(dAtA[i:], m.NetworkFee)
		i = encodeVarintOldparams(dAtA, i, uint64(len(m.NetworkFee)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.StorageCost.Size()
		i -= size
		if _, err := m.StorageCost.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOldparams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.UploadTimeout != 0 {
		i = encodeVarintOldparams(dAtA, i, uint64(m.UploadTimeout))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OldDelegationParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OldDelegationParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OldDelegationParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimeoutSlash) > 0 {
		i -= len(m.TimeoutSlash)
		copy(dAtA[i:], m.TimeoutSlash)
		i = encodeVarintOldparams(dAtA, i, uint64(len(m.TimeoutSlash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UploadSlash) > 0 {
		i -= len(m.UploadSlash)
		copy(dAtA[i:], m.UploadSlash)
		i = encodeVarintOldparams(dAtA, i, uint64(len(m.UploadSlash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VoteSlash) > 0 {
		i -= len(m.VoteSlash)
		copy(dAtA[i:], m.VoteSlash)
		i = encodeVarintOldparams(dAtA, i, uint64(len(m.VoteSlash)))
		i--
		dAtA[i] = 0x22
	}
	if m.RedelegationMaxAmount != 0 {
		i = encodeVarintOldparams(dAtA, i, uint64(m.RedelegationMaxAmount))
		i--
		dAtA[i] = 0x18
	}
	if m.RedelegationCooldown != 0 {
		i = encodeVarintOldparams(dAtA, i, uint64(m.RedelegationCooldown))
		i--
		dAtA[i] = 0x10
	}
	if m.UnbondingDelegationTime != 0 {
		i = encodeVarintOldparams(dAtA, i, uint64(m.UnbondingDelegationTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOldparams(dAtA []byte, offset int, v uint64) int {
	offset -= sovOldparams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OldBundlesParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UploadTimeout != 0 {
		n += 1 + sovOldparams(uint64(m.UploadTimeout))
	}
	l = m.StorageCost.Size()
	n += 1 + l + sovOldparams(uint64(l))
	l = len(m.NetworkFee)
	if l > 0 {
		n += 1 + l + sovOldparams(uint64(l))
	}
	if m.MaxPoints != 0 {
		n += 1 + sovOldparams(uint64(m.MaxPoints))
	}
	return n
}

func (m *OldDelegationParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnbondingDelegationTime != 0 {
		n += 1 + sovOldparams(uint64(m.UnbondingDelegationTime))
	}
	if m.RedelegationCooldown != 0 {
		n += 1 + sovOldparams(uint64(m.RedelegationCooldown))
	}
	if m.RedelegationMaxAmount != 0 {
		n += 1 + sovOldparams(uint64(m.RedelegationMaxAmount))
	}
	l = len(m.VoteSlash)
	if l > 0 {
		n += 1 + l + sovOldparams(uint64(l))
	}
	l = len(m.UploadSlash)
	if l > 0 {
		n += 1 + l + sovOldparams(uint64(l))
	}
	l = len(m.TimeoutSlash)
	if l > 0 {
		n += 1 + l + sovOldparams(uint64(l))
	}
	return n
}

func sovOldparams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOldparams(x uint64) (n int) {
	return sovOldparams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OldBundlesParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOldparams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OldBundlesParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OldBundlesParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadTimeout", wireType)
			}
			m.UploadTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldparams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageCost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldparams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOldparams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOldparams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StorageCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldparams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOldparams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOldparams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPoints", wireType)
			}
			m.MaxPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldparams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPoints |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOldparams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOldparams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OldDelegationParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOldparams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OldDelegationParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OldDelegationParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegationTime", wireType)
			}
			m.UnbondingDelegationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldparams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingDelegationTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedelegationCooldown", wireType)
			}
			m.RedelegationCooldown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldparams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedelegationCooldown |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedelegationMaxAmount", wireType)
			}
			m.RedelegationMaxAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldparams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedelegationMaxAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteSlash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldparams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOldparams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOldparams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteSlash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadSlash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldparams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOldparams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOldparams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UploadSlash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutSlash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldparams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOldparams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOldparams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeoutSlash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOldparams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOldparams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOldparams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOldparams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOldparams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOldparams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOldparams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOldparams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOldparams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOldparams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOldparams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOldparams = fmt.Errorf("proto: unexpected end of group")
)
