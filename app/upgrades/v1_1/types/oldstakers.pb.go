// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/upgrades/v1beta1/oldstakers.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OldStaker contains all metadata for a staker
// Every address can only create one staker (itself)
type OldStaker struct {
	// address ...
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// commission ...
	Commission string `protobuf:"bytes,2,opt,name=commission,proto3" json:"commission,omitempty"`
	// moniker ...
	Moniker string `protobuf:"bytes,3,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// website ...
	Website string `protobuf:"bytes,4,opt,name=website,proto3" json:"website,omitempty"`
	// logo ...
	Logo string `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
}

func (m *OldStaker) Reset()         { *m = OldStaker{} }
func (m *OldStaker) String() string { return proto.CompactTextString(m) }
func (*OldStaker) ProtoMessage()    {}
func (*OldStaker) Descriptor() ([]byte, []int) {
	return fileDescriptor_f287c84efd0af955, []int{0}
}
func (m *OldStaker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OldStaker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OldStaker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OldStaker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OldStaker.Merge(m, src)
}
func (m *OldStaker) XXX_Size() int {
	return m.Size()
}
func (m *OldStaker) XXX_DiscardUnknown() {
	xxx_messageInfo_OldStaker.DiscardUnknown(m)
}

var xxx_messageInfo_OldStaker proto.InternalMessageInfo

func (m *OldStaker) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *OldStaker) GetCommission() string {
	if m != nil {
		return m.Commission
	}
	return ""
}

func (m *OldStaker) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *OldStaker) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *OldStaker) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

// CommissionChangeEntry stores the information for an
// upcoming commission change. A commission change is never
// instant, so delegators have time to redelegate in case
// they don't agree with the new commission.
type OldCommissionChangeEntry struct {
	// index is needed for the queue-algorithm which
	// processes the commission changes
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// staker is the address of the affected staker
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	// commission is the new commission which will
	// be applied after the waiting time is over.
	Commission string `protobuf:"bytes,3,opt,name=commission,proto3" json:"commission,omitempty"`
	// creation_date is the UNIX-timestamp in seconds
	// when the entry was created.
	CreationDate int64 `protobuf:"varint,4,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (m *OldCommissionChangeEntry) Reset()         { *m = OldCommissionChangeEntry{} }
func (m *OldCommissionChangeEntry) String() string { return proto.CompactTextString(m) }
func (*OldCommissionChangeEntry) ProtoMessage()    {}
func (*OldCommissionChangeEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f287c84efd0af955, []int{1}
}
func (m *OldCommissionChangeEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OldCommissionChangeEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OldCommissionChangeEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OldCommissionChangeEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OldCommissionChangeEntry.Merge(m, src)
}
func (m *OldCommissionChangeEntry) XXX_Size() int {
	return m.Size()
}
func (m *OldCommissionChangeEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_OldCommissionChangeEntry.DiscardUnknown(m)
}

var xxx_messageInfo_OldCommissionChangeEntry proto.InternalMessageInfo

func (m *OldCommissionChangeEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *OldCommissionChangeEntry) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *OldCommissionChangeEntry) GetCommission() string {
	if m != nil {
		return m.Commission
	}
	return ""
}

func (m *OldCommissionChangeEntry) GetCreationDate() int64 {
	if m != nil {
		return m.CreationDate
	}
	return 0
}

func init() {
	proto.RegisterType((*OldStaker)(nil), "kyve.upgrades.v1beta1.OldStaker")
	proto.RegisterType((*OldCommissionChangeEntry)(nil), "kyve.upgrades.v1beta1.OldCommissionChangeEntry")
}

func init() {
	proto.RegisterFile("kyve/upgrades/v1beta1/oldstakers.proto", fileDescriptor_f287c84efd0af955)
}

var fileDescriptor_f287c84efd0af955 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcb, 0x4a, 0x33, 0x31,
	0x14, 0xc7, 0x3b, 0x5f, 0x2f, 0x1f, 0x0d, 0xba, 0x09, 0x2a, 0x59, 0x05, 0x51, 0x10, 0x57, 0x13,
	0x8a, 0x3e, 0x81, 0xb5, 0x2b, 0xa1, 0x85, 0x0a, 0x82, 0x6e, 0x4a, 0x66, 0x72, 0x98, 0x86, 0x99,
	0x49, 0x86, 0x24, 0x6d, 0xed, 0x43, 0x08, 0x3e, 0x96, 0xcb, 0x2e, 0x5d, 0x4a, 0xfb, 0x22, 0x32,
	0x99, 0x54, 0x8a, 0xee, 0xf2, 0xbf, 0x9c, 0xf0, 0x3b, 0x1c, 0x74, 0x95, 0xaf, 0x97, 0xc0, 0x16,
	0x55, 0x66, 0xb8, 0x00, 0xcb, 0x96, 0x83, 0x04, 0x1c, 0x1f, 0x30, 0x5d, 0x08, 0xeb, 0x78, 0x0e,
	0xc6, 0xc6, 0x95, 0xd1, 0x4e, 0xe3, 0xd3, 0xba, 0x17, 0xef, 0x7b, 0x71, 0xe8, 0x5d, 0xbc, 0x45,
	0xa8, 0x3f, 0x29, 0xc4, 0xa3, 0xef, 0x62, 0x82, 0xfe, 0x73, 0x21, 0x0c, 0x58, 0x4b, 0xa2, 0xf3,
	0xe8, 0xba, 0x3f, 0xdd, 0x4b, 0x4c, 0x11, 0x4a, 0x75, 0x59, 0x4a, 0x6b, 0xa5, 0x56, 0xe4, 0x9f,
	0x0f, 0x0f, 0x9c, 0x7a, 0xb2, 0xd4, 0x4a, 0xe6, 0x60, 0x48, 0xbb, 0x99, 0x0c, 0xb2, 0x4e, 0x56,
	0x90, 0x58, 0xe9, 0x80, 0x74, 0x9a, 0x24, 0x48, 0x8c, 0x51, 0xa7, 0xd0, 0x99, 0x26, 0x5d, 0x6f,
	0xfb, 0x77, 0xcd, 0x43, 0x26, 0x85, 0x18, 0xfe, 0xfc, 0x3c, 0x9c, 0x73, 0x95, 0xc1, 0x48, 0x39,
	0xb3, 0xc6, 0x27, 0xa8, 0x2b, 0x95, 0x80, 0x57, 0x0f, 0xd7, 0x99, 0x36, 0x02, 0x9f, 0xa1, 0x5e,
	0xb3, 0x6a, 0xc0, 0x0a, 0xea, 0x17, 0x72, 0xfb, 0x0f, 0xf2, 0x25, 0x3a, 0x4e, 0x0d, 0x70, 0x27,
	0xb5, 0x9a, 0x09, 0x1e, 0xf0, 0xda, 0xd3, 0xa3, 0xbd, 0x79, 0xcf, 0x1d, 0xdc, 0x8d, 0x3f, 0xb6,
	0x34, 0xda, 0x6c, 0x69, 0xf4, 0xb5, 0xa5, 0xd1, 0xfb, 0x8e, 0xb6, 0x36, 0x3b, 0xda, 0xfa, 0xdc,
	0xd1, 0xd6, 0xcb, 0x6d, 0x26, 0xdd, 0x7c, 0x91, 0xc4, 0xa9, 0x2e, 0xd9, 0xc3, 0xf3, 0xd3, 0x68,
	0x0c, 0x6e, 0xa5, 0x4d, 0xce, 0xd2, 0x39, 0x97, 0x8a, 0xf1, 0xaa, 0x3a, 0x3c, 0xca, 0x6c, 0xc0,
	0xdc, 0xba, 0x02, 0x9b, 0xf4, 0xfc, 0x35, 0x6e, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x7d,
	0x0c, 0x80, 0xb7, 0x01, 0x00, 0x00,
}

func (m *OldStaker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OldStaker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OldStaker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintOldstakers(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintOldstakers(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintOldstakers(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Commission) > 0 {
		i -= len(m.Commission)
		copy(dAtA[i:], m.Commission)
		i = encodeVarintOldstakers(dAtA, i, uint64(len(m.Commission)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOldstakers(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OldCommissionChangeEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OldCommissionChangeEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OldCommissionChangeEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreationDate != 0 {
		i = encodeVarintOldstakers(dAtA, i, uint64(m.CreationDate))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Commission) > 0 {
		i -= len(m.Commission)
		copy(dAtA[i:], m.Commission)
		i = encodeVarintOldstakers(dAtA, i, uint64(len(m.Commission)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintOldstakers(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintOldstakers(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOldstakers(dAtA []byte, offset int, v uint64) int {
	offset -= sovOldstakers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OldStaker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOldstakers(uint64(l))
	}
	l = len(m.Commission)
	if l > 0 {
		n += 1 + l + sovOldstakers(uint64(l))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovOldstakers(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovOldstakers(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovOldstakers(uint64(l))
	}
	return n
}

func (m *OldCommissionChangeEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovOldstakers(uint64(m.Index))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovOldstakers(uint64(l))
	}
	l = len(m.Commission)
	if l > 0 {
		n += 1 + l + sovOldstakers(uint64(l))
	}
	if m.CreationDate != 0 {
		n += 1 + sovOldstakers(uint64(m.CreationDate))
	}
	return n
}

func sovOldstakers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOldstakers(x uint64) (n int) {
	return sovOldstakers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OldStaker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOldstakers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OldStaker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OldStaker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldstakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOldstakers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOldstakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldstakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOldstakers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOldstakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldstakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOldstakers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOldstakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldstakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOldstakers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOldstakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldstakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOldstakers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOldstakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOldstakers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOldstakers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OldCommissionChangeEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOldstakers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OldCommissionChangeEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OldCommissionChangeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldstakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldstakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOldstakers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOldstakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldstakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOldstakers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOldstakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			m.CreationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOldstakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOldstakers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOldstakers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOldstakers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOldstakers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOldstakers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOldstakers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOldstakers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOldstakers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOldstakers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOldstakers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOldstakers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOldstakers = fmt.Errorf("proto: unexpected end of group")
)
