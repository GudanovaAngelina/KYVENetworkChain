// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/funders/v1beta1/funders.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Funder is the object which holds info about a single pool funder
type Funder struct {
	// address ...
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// moniker ...
	Moniker string `protobuf:"bytes,2,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// identity is the 64 bit keybase.io identity string
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	// logo ...
	Logo string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	// website ...
	Website string `protobuf:"bytes,5,opt,name=website,proto3" json:"website,omitempty"`
	// contact ...
	Contact string `protobuf:"bytes,6,opt,name=contact,proto3" json:"contact,omitempty"`
	// description are some additional notes the funder finds important
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Funder) Reset()         { *m = Funder{} }
func (m *Funder) String() string { return proto.CompactTextString(m) }
func (*Funder) ProtoMessage()    {}
func (*Funder) Descriptor() ([]byte, []int) {
	return fileDescriptor_252d80f89b0fa299, []int{0}
}
func (m *Funder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Funder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Funder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Funder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Funder.Merge(m, src)
}
func (m *Funder) XXX_Size() int {
	return m.Size()
}
func (m *Funder) XXX_DiscardUnknown() {
	xxx_messageInfo_Funder.DiscardUnknown(m)
}

var xxx_messageInfo_Funder proto.InternalMessageInfo

func (m *Funder) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Funder) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *Funder) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Funder) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Funder) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Funder) GetContact() string {
	if m != nil {
		return m.Contact
	}
	return ""
}

func (m *Funder) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// Funding is the object which holds info about the current funding
// funder_address and pool_id (m2m) are unique together which means that
// a funder can only fund each pool once and a pool can only be funded
// by each funder once. However, a funder can update the amount of funds.
type Funding struct {
	// funder_id is the id of the funder
	FunderAddress string `protobuf:"bytes,1,opt,name=funder_address,json=funderAddress,proto3" json:"funder_address,omitempty"`
	// pool_id is the id of the pool this funding is for
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// amount is the amount of funds in ukyve the funder has left
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// amount_per_bundle is the amount of funds in ukyve the funder pays per bundle
	AmountPerBundle uint64 `protobuf:"varint,4,opt,name=amount_per_bundle,json=amountPerBundle,proto3" json:"amount_per_bundle,omitempty"`
	// total_funded is the total amount of funds in ukyve the funder has funded
	TotalFunded uint64 `protobuf:"varint,5,opt,name=total_funded,json=totalFunded,proto3" json:"total_funded,omitempty"`
}

func (m *Funding) Reset()         { *m = Funding{} }
func (m *Funding) String() string { return proto.CompactTextString(m) }
func (*Funding) ProtoMessage()    {}
func (*Funding) Descriptor() ([]byte, []int) {
	return fileDescriptor_252d80f89b0fa299, []int{1}
}
func (m *Funding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Funding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Funding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Funding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Funding.Merge(m, src)
}
func (m *Funding) XXX_Size() int {
	return m.Size()
}
func (m *Funding) XXX_DiscardUnknown() {
	xxx_messageInfo_Funding.DiscardUnknown(m)
}

var xxx_messageInfo_Funding proto.InternalMessageInfo

func (m *Funding) GetFunderAddress() string {
	if m != nil {
		return m.FunderAddress
	}
	return ""
}

func (m *Funding) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *Funding) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Funding) GetAmountPerBundle() uint64 {
	if m != nil {
		return m.AmountPerBundle
	}
	return 0
}

func (m *Funding) GetTotalFunded() uint64 {
	if m != nil {
		return m.TotalFunded
	}
	return 0
}

// FundingState is the object which holds info about the funding state of a pool
type FundingState struct {
	// pool_id is the id of the pool this funding is for
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// active_fundings is the list of all active fundings
	ActiveFunderAddresses []string `protobuf:"bytes,2,rep,name=active_funder_addresses,json=activeFunderAddresses,proto3" json:"active_funder_addresses,omitempty"`
	// total_amount is the total amount of funds in ukyve the pool has from all fundings
	TotalAmount uint64 `protobuf:"varint,3,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
}

func (m *FundingState) Reset()         { *m = FundingState{} }
func (m *FundingState) String() string { return proto.CompactTextString(m) }
func (*FundingState) ProtoMessage()    {}
func (*FundingState) Descriptor() ([]byte, []int) {
	return fileDescriptor_252d80f89b0fa299, []int{2}
}
func (m *FundingState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundingState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundingState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundingState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundingState.Merge(m, src)
}
func (m *FundingState) XXX_Size() int {
	return m.Size()
}
func (m *FundingState) XXX_DiscardUnknown() {
	xxx_messageInfo_FundingState.DiscardUnknown(m)
}

var xxx_messageInfo_FundingState proto.InternalMessageInfo

func (m *FundingState) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *FundingState) GetActiveFunderAddresses() []string {
	if m != nil {
		return m.ActiveFunderAddresses
	}
	return nil
}

func (m *FundingState) GetTotalAmount() uint64 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

func init() {
	proto.RegisterType((*Funder)(nil), "kyve.funders.v1beta1.Funder")
	proto.RegisterType((*Funding)(nil), "kyve.funders.v1beta1.Funding")
	proto.RegisterType((*FundingState)(nil), "kyve.funders.v1beta1.FundingState")
}

func init() {
	proto.RegisterFile("kyve/funders/v1beta1/funders.proto", fileDescriptor_252d80f89b0fa299)
}

var fileDescriptor_252d80f89b0fa299 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x77, 0xda, 0x98, 0xb5, 0xd3, 0xaa, 0x38, 0xa8, 0x1d, 0x3c, 0x84, 0x35, 0x20, 0x14,
	0x91, 0x0d, 0x45, 0xf0, 0xde, 0x82, 0x0b, 0x22, 0x88, 0x44, 0x10, 0xf4, 0x12, 0x26, 0x99, 0xe7,
	0x76, 0xd8, 0xec, 0x4c, 0x98, 0x79, 0xd9, 0xba, 0x57, 0x3f, 0x81, 0x1f, 0xc5, 0xcf, 0xe0, 0xc9,
	0x63, 0x8f, 0x1e, 0x65, 0xf7, 0x8b, 0x48, 0x66, 0xb2, 0x75, 0x73, 0x9b, 0xff, 0xff, 0xff, 0x78,
	0xf9, 0xff, 0xc2, 0xa3, 0xe9, 0x62, 0xbd, 0x82, 0xec, 0x6b, 0xab, 0x25, 0x58, 0x97, 0xad, 0xce,
	0x4b, 0x40, 0x71, 0xbe, 0xd3, 0xd3, 0xc6, 0x1a, 0x34, 0xec, 0x51, 0x37, 0x33, 0xdd, 0x79, 0xfd,
	0x4c, 0xfa, 0x8b, 0xd0, 0x78, 0xe6, 0x3d, 0xc6, 0xe9, 0x58, 0x48, 0x69, 0xc1, 0x39, 0x4e, 0x26,
	0xe4, 0xec, 0x28, 0xdf, 0xc9, 0x2e, 0x59, 0x1a, 0xad, 0x16, 0x60, 0xf9, 0x41, 0x48, 0x7a, 0xc9,
	0x9e, 0xd2, 0xbb, 0x4a, 0x82, 0x46, 0x85, 0x6b, 0x7e, 0xe8, 0xa3, 0x5b, 0xcd, 0x18, 0x8d, 0x6a,
	0x33, 0x37, 0x3c, 0xf2, 0xbe, 0x7f, 0x77, 0x9b, 0xae, 0xa1, 0x74, 0x0a, 0x81, 0xdf, 0x09, 0x9b,
	0x7a, 0xd9, 0x25, 0x95, 0xd1, 0x28, 0x2a, 0xe4, 0x71, 0x48, 0x7a, 0xc9, 0x26, 0xf4, 0x58, 0x82,
	0xab, 0xac, 0x6a, 0x50, 0x19, 0xcd, 0xc7, 0x3e, 0xdd, 0xb7, 0xd2, 0x9f, 0x84, 0x8e, 0x3b, 0x08,
	0xa5, 0xe7, 0xec, 0x39, 0xbd, 0x1f, 0x18, 0x8b, 0x21, 0xcc, 0xbd, 0xe0, 0x5e, 0xf4, 0x48, 0xa7,
	0x74, 0xdc, 0x18, 0x53, 0x17, 0x4a, 0x7a, 0xa4, 0x28, 0x8f, 0x3b, 0xf9, 0x56, 0xb2, 0x27, 0x34,
	0x16, 0x4b, 0xd3, 0x6a, 0xf4, 0x3c, 0x51, 0xde, 0x2b, 0xf6, 0x82, 0x3e, 0x0c, 0xaf, 0xa2, 0x01,
	0x5b, 0x94, 0xad, 0x96, 0x35, 0x78, 0xb4, 0x28, 0x7f, 0x10, 0x82, 0x0f, 0x60, 0x2f, 0xbd, 0xcd,
	0x9e, 0xd1, 0x13, 0x34, 0x28, 0xea, 0xc2, 0x7f, 0x53, 0x7a, 0xd4, 0x28, 0x3f, 0xf6, 0x9e, 0xff,
	0xd9, 0x32, 0xfd, 0x4e, 0xe8, 0x49, 0x5f, 0xf9, 0x23, 0x0a, 0x84, 0xfd, 0x42, 0x64, 0x50, 0xe8,
	0x35, 0x3d, 0x15, 0x15, 0xaa, 0x15, 0x14, 0x43, 0x2e, 0x70, 0xfc, 0x60, 0x72, 0x78, 0x76, 0x94,
	0x3f, 0x0e, 0xf1, 0x6c, 0x9f, 0x0f, 0xdc, 0xff, 0x12, 0x03, 0x9c, 0x50, 0xe2, 0xc2, 0x5b, 0x97,
	0xb3, 0xdf, 0x9b, 0x84, 0xdc, 0x6c, 0x12, 0xf2, 0x77, 0x93, 0x90, 0x1f, 0xdb, 0x64, 0x74, 0xb3,
	0x4d, 0x46, 0x7f, 0xb6, 0xc9, 0xe8, 0xcb, 0xcb, 0xb9, 0xc2, 0xab, 0xb6, 0x9c, 0x56, 0x66, 0x99,
	0xbd, 0xfb, 0xfc, 0xe9, 0xcd, 0x7b, 0xc0, 0x6b, 0x63, 0x17, 0x59, 0x75, 0x25, 0x94, 0xce, 0xbe,
	0xdd, 0x9e, 0x1a, 0xae, 0x1b, 0x70, 0x65, 0xec, 0x2f, 0xec, 0xd5, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x49, 0x3b, 0xb1, 0x5c, 0x87, 0x02, 0x00, 0x00,
}

func (m *Funder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Funder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Funder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFunders(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Contact) > 0 {
		i -= len(m.Contact)
		copy(dAtA[i:], m.Contact)
		i = encodeVarintFunders(dAtA, i, uint64(len(m.Contact)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintFunders(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintFunders(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintFunders(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintFunders(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintFunders(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Funding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Funding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Funding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalFunded != 0 {
		i = encodeVarintFunders(dAtA, i, uint64(m.TotalFunded))
		i--
		dAtA[i] = 0x28
	}
	if m.AmountPerBundle != 0 {
		i = encodeVarintFunders(dAtA, i, uint64(m.AmountPerBundle))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintFunders(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintFunders(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FunderAddress) > 0 {
		i -= len(m.FunderAddress)
		copy(dAtA[i:], m.FunderAddress)
		i = encodeVarintFunders(dAtA, i, uint64(len(m.FunderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FundingState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundingState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundingState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalAmount != 0 {
		i = encodeVarintFunders(dAtA, i, uint64(m.TotalAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ActiveFunderAddresses) > 0 {
		for iNdEx := len(m.ActiveFunderAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ActiveFunderAddresses[iNdEx])
			copy(dAtA[i:], m.ActiveFunderAddresses[iNdEx])
			i = encodeVarintFunders(dAtA, i, uint64(len(m.ActiveFunderAddresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PoolId != 0 {
		i = encodeVarintFunders(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFunders(dAtA []byte, offset int, v uint64) int {
	offset -= sovFunders(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Funder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovFunders(uint64(l))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovFunders(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovFunders(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovFunders(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovFunders(uint64(l))
	}
	l = len(m.Contact)
	if l > 0 {
		n += 1 + l + sovFunders(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFunders(uint64(l))
	}
	return n
}

func (m *Funding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FunderAddress)
	if l > 0 {
		n += 1 + l + sovFunders(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovFunders(uint64(m.PoolId))
	}
	if m.Amount != 0 {
		n += 1 + sovFunders(uint64(m.Amount))
	}
	if m.AmountPerBundle != 0 {
		n += 1 + sovFunders(uint64(m.AmountPerBundle))
	}
	if m.TotalFunded != 0 {
		n += 1 + sovFunders(uint64(m.TotalFunded))
	}
	return n
}

func (m *FundingState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovFunders(uint64(m.PoolId))
	}
	if len(m.ActiveFunderAddresses) > 0 {
		for _, s := range m.ActiveFunderAddresses {
			l = len(s)
			n += 1 + l + sovFunders(uint64(l))
		}
	}
	if m.TotalAmount != 0 {
		n += 1 + sovFunders(uint64(m.TotalAmount))
	}
	return n
}

func sovFunders(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFunders(x uint64) (n int) {
	return sovFunders(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Funder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFunders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Funder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Funder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFunders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFunders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFunders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFunders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFunders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFunders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFunders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFunders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFunders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFunders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFunders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFunders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFunders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFunders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFunders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFunders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Funding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFunders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Funding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Funding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFunders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFunders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPerBundle", wireType)
			}
			m.AmountPerBundle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountPerBundle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFunded", wireType)
			}
			m.TotalFunded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFunded |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFunders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFunders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundingState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFunders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundingState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundingState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveFunderAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFunders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFunders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveFunderAddresses = append(m.ActiveFunderAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			m.TotalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFunders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFunders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFunders(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFunders
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFunders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFunders
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFunders
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFunders
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFunders        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFunders          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFunders = fmt.Errorf("proto: unexpected end of group")
)
