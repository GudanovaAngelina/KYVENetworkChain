// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/funders/v1beta1/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WhitelistCoinEntry is an object containing information around a coin which
// is allowed to be funded in pools
type WhitelistCoinEntry struct {
	// coin_denom is the denom of a coin which is allowed to be funded, this value
	// needs to be unique
	CoinDenom string `protobuf:"bytes,1,opt,name=coin_denom,json=coinDenom,proto3" json:"coin_denom,omitempty"`
	// min_funding_amount is the minimum required amount of this denom that needs
	// to be funded
	MinFundingAmount uint64 `protobuf:"varint,2,opt,name=min_funding_amount,json=minFundingAmount,proto3" json:"min_funding_amount,omitempty"`
	// min_funding_amount_per_bundle is the minimum required amount of this denom
	// that needs to be funded per bundle
	MinFundingAmountPerBundle uint64 `protobuf:"varint,3,opt,name=min_funding_amount_per_bundle,json=minFundingAmountPerBundle,proto3" json:"min_funding_amount_per_bundle,omitempty"`
	// coin_weight is a factor used to sort funders after their funding amounts.
	// This should be the market price of that coin in USD/coin and should be
	// kept up-to-date
	CoinWeight cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=coin_weight,json=coinWeight,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"coin_weight"`
}

func (m *WhitelistCoinEntry) Reset()         { *m = WhitelistCoinEntry{} }
func (m *WhitelistCoinEntry) String() string { return proto.CompactTextString(m) }
func (*WhitelistCoinEntry) ProtoMessage()    {}
func (*WhitelistCoinEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_906a9a55094dc984, []int{0}
}
func (m *WhitelistCoinEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhitelistCoinEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhitelistCoinEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhitelistCoinEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhitelistCoinEntry.Merge(m, src)
}
func (m *WhitelistCoinEntry) XXX_Size() int {
	return m.Size()
}
func (m *WhitelistCoinEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_WhitelistCoinEntry.DiscardUnknown(m)
}

var xxx_messageInfo_WhitelistCoinEntry proto.InternalMessageInfo

func (m *WhitelistCoinEntry) GetCoinDenom() string {
	if m != nil {
		return m.CoinDenom
	}
	return ""
}

func (m *WhitelistCoinEntry) GetMinFundingAmount() uint64 {
	if m != nil {
		return m.MinFundingAmount
	}
	return 0
}

func (m *WhitelistCoinEntry) GetMinFundingAmountPerBundle() uint64 {
	if m != nil {
		return m.MinFundingAmountPerBundle
	}
	return 0
}

// Params defines the funders module parameters.
type Params struct {
	// coin_whitelist is a list of coins that are allowed to fund a pool
	CoinWhitelist []*WhitelistCoinEntry `protobuf:"bytes,1,rep,name=coin_whitelist,json=coinWhitelist,proto3" json:"coin_whitelist,omitempty"`
	// Minimum ratio between the funded amount and the amount_per_bundle.
	// In other words this param ensures, that a funder provides at least
	// funding for `min_funding_multiple` bundles.
	MinFundingMultiple uint64 `protobuf:"varint,2,opt,name=min_funding_multiple,json=minFundingMultiple,proto3" json:"min_funding_multiple,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_906a9a55094dc984, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetCoinWhitelist() []*WhitelistCoinEntry {
	if m != nil {
		return m.CoinWhitelist
	}
	return nil
}

func (m *Params) GetMinFundingMultiple() uint64 {
	if m != nil {
		return m.MinFundingMultiple
	}
	return 0
}

func init() {
	proto.RegisterType((*WhitelistCoinEntry)(nil), "kyve.funders.v1beta1.WhitelistCoinEntry")
	proto.RegisterType((*Params)(nil), "kyve.funders.v1beta1.Params")
}

func init() { proto.RegisterFile("kyve/funders/v1beta1/params.proto", fileDescriptor_906a9a55094dc984) }

var fileDescriptor_906a9a55094dc984 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcd, 0x8e, 0xda, 0x30,
	0x14, 0x85, 0xe3, 0x82, 0x90, 0x30, 0x6a, 0x55, 0x59, 0x2c, 0xd2, 0x56, 0x04, 0x4a, 0x37, 0x59,
	0x20, 0xbb, 0xb4, 0x2f, 0xd0, 0x52, 0x60, 0xd3, 0x3f, 0x94, 0x45, 0x51, 0xbb, 0x89, 0xf2, 0xe3,
	0x26, 0x16, 0xb1, 0x1d, 0x25, 0x0e, 0x34, 0xcf, 0xd0, 0x4d, 0x1f, 0x8b, 0x25, 0xcb, 0xaa, 0x0b,
	0x54, 0xc1, 0x6a, 0xde, 0x62, 0x14, 0x13, 0x66, 0x46, 0xc3, 0xec, 0xac, 0x73, 0xbf, 0x7b, 0x7d,
	0xcf, 0xb9, 0xf0, 0xe5, 0xaa, 0x5c, 0x53, 0xf2, 0xb3, 0x10, 0x21, 0xcd, 0x72, 0xb2, 0x1e, 0xfb,
	0x54, 0x79, 0x63, 0x92, 0x7a, 0x99, 0xc7, 0x73, 0x9c, 0x66, 0x52, 0x49, 0xd4, 0xad, 0x10, 0x5c,
	0x23, 0xb8, 0x46, 0x9e, 0x77, 0x23, 0x19, 0x49, 0x0d, 0x90, 0xea, 0x75, 0x62, 0x87, 0x57, 0x00,
	0xa2, 0x65, 0xcc, 0x14, 0x4d, 0x58, 0xae, 0x3e, 0x48, 0x26, 0x66, 0x42, 0x65, 0x25, 0xea, 0x41,
	0x18, 0x48, 0x26, 0xdc, 0x90, 0x0a, 0xc9, 0x4d, 0x30, 0x00, 0x76, 0xdb, 0x69, 0x57, 0xca, 0xb4,
	0x12, 0xd0, 0x08, 0x22, 0xce, 0x84, 0x5b, 0x7d, 0xc1, 0x44, 0xe4, 0x7a, 0x5c, 0x16, 0x42, 0x99,
	0x8f, 0x06, 0xc0, 0x6e, 0x3a, 0x4f, 0x39, 0x13, 0xf3, 0x53, 0xe1, 0xbd, 0xd6, 0xd1, 0x3b, 0xd8,
	0xbb, 0xa4, 0xdd, 0x94, 0x66, 0xae, 0x5f, 0x88, 0x30, 0xa1, 0x66, 0x43, 0x37, 0x3e, 0xbb, 0xdf,
	0xb8, 0xa0, 0xd9, 0x44, 0x03, 0x68, 0x0a, 0x3b, 0x7a, 0x9d, 0x0d, 0x65, 0x51, 0xac, 0xcc, 0x66,
	0xb5, 0xcf, 0xe4, 0xd5, 0x76, 0xdf, 0x37, 0xfe, 0xed, 0xfb, 0x2f, 0x02, 0x99, 0x73, 0x99, 0xe7,
	0xe1, 0x0a, 0x33, 0x49, 0xb8, 0xa7, 0x62, 0xfc, 0x89, 0x46, 0x5e, 0x50, 0x4e, 0x69, 0xe0, 0x68,
	0x1b, 0x4b, 0xdd, 0x36, 0xfc, 0x0d, 0x60, 0x6b, 0xa1, 0x83, 0x42, 0x5f, 0xe1, 0x93, 0xd3, 0xc0,
	0xb3, 0x75, 0x13, 0x0c, 0x1a, 0x76, 0xe7, 0x8d, 0x8d, 0x1f, 0xca, 0x0e, 0x5f, 0x26, 0xe4, 0x3c,
	0xd6, 0x83, 0xcf, 0x3a, 0x7a, 0x0d, 0xbb, 0x77, 0x3d, 0xf2, 0x22, 0x51, 0x2c, 0x4d, 0x68, 0x9d,
	0x09, 0xba, 0xb5, 0xf6, 0xb9, 0xae, 0x4c, 0xe6, 0xdb, 0x83, 0x05, 0x76, 0x07, 0x0b, 0xfc, 0x3f,
	0x58, 0xe0, 0xcf, 0xd1, 0x32, 0x76, 0x47, 0xcb, 0xf8, 0x7b, 0xb4, 0x8c, 0x1f, 0xa3, 0x88, 0xa9,
	0xb8, 0xf0, 0x71, 0x20, 0x39, 0xf9, 0xf8, 0xfd, 0xdb, 0xec, 0x0b, 0x55, 0x1b, 0x99, 0xad, 0x48,
	0x10, 0x7b, 0x4c, 0x90, 0x5f, 0x37, 0xc7, 0x57, 0x65, 0x4a, 0x73, 0xbf, 0xa5, 0x0f, 0xf9, 0xf6,
	0x3a, 0x00, 0x00, 0xff, 0xff, 0x73, 0xb9, 0xd1, 0x11, 0x19, 0x02, 0x00, 0x00,
}

func (m *WhitelistCoinEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhitelistCoinEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhitelistCoinEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CoinWeight.Size()
		i -= size
		if _, err := m.CoinWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.MinFundingAmountPerBundle != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinFundingAmountPerBundle))
		i--
		dAtA[i] = 0x18
	}
	if m.MinFundingAmount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinFundingAmount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CoinDenom) > 0 {
		i -= len(m.CoinDenom)
		copy(dAtA[i:], m.CoinDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.CoinDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinFundingMultiple != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinFundingMultiple))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CoinWhitelist) > 0 {
		for iNdEx := len(m.CoinWhitelist) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoinWhitelist[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WhitelistCoinEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CoinDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.MinFundingAmount != 0 {
		n += 1 + sovParams(uint64(m.MinFundingAmount))
	}
	if m.MinFundingAmountPerBundle != 0 {
		n += 1 + sovParams(uint64(m.MinFundingAmountPerBundle))
	}
	l = m.CoinWeight.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CoinWhitelist) > 0 {
		for _, e := range m.CoinWhitelist {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.MinFundingMultiple != 0 {
		n += 1 + sovParams(uint64(m.MinFundingMultiple))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WhitelistCoinEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhitelistCoinEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhitelistCoinEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFundingAmount", wireType)
			}
			m.MinFundingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinFundingAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFundingAmountPerBundle", wireType)
			}
			m.MinFundingAmountPerBundle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinFundingAmountPerBundle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinWhitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinWhitelist = append(m.CoinWhitelist, &WhitelistCoinEntry{})
			if err := m.CoinWhitelist[len(m.CoinWhitelist)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFundingMultiple", wireType)
			}
			m.MinFundingMultiple = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinFundingMultiple |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
