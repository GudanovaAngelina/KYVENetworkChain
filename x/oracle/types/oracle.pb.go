// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/oracle/v1/oracle.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params ...
type Params struct {
	// price_per_byte ...
	PricePerByte cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=price_per_byte,json=pricePerByte,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price_per_byte"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_5044fc7099d40e0e, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// OracleMemo ...
type OracleMemo struct {
	// query ...
	Query *OracleQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *OracleMemo) Reset()         { *m = OracleMemo{} }
func (m *OracleMemo) String() string { return proto.CompactTextString(m) }
func (*OracleMemo) ProtoMessage()    {}
func (*OracleMemo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5044fc7099d40e0e, []int{1}
}
func (m *OracleMemo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleMemo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleMemo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleMemo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleMemo.Merge(m, src)
}
func (m *OracleMemo) XXX_Size() int {
	return m.Size()
}
func (m *OracleMemo) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleMemo.DiscardUnknown(m)
}

var xxx_messageInfo_OracleMemo proto.InternalMessageInfo

func (m *OracleMemo) GetQuery() *OracleQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

// OracleQuery ...
type OracleQuery struct {
	// query ...
	//
	// Types that are valid to be assigned to Query:
	//
	//	*OracleQuery_LatestSummary
	Query isOracleQuery_Query `protobuf_oneof:"query"`
}

func (m *OracleQuery) Reset()         { *m = OracleQuery{} }
func (m *OracleQuery) String() string { return proto.CompactTextString(m) }
func (*OracleQuery) ProtoMessage()    {}
func (*OracleQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_5044fc7099d40e0e, []int{2}
}
func (m *OracleQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleQuery.Merge(m, src)
}
func (m *OracleQuery) XXX_Size() int {
	return m.Size()
}
func (m *OracleQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleQuery.DiscardUnknown(m)
}

var xxx_messageInfo_OracleQuery proto.InternalMessageInfo

type isOracleQuery_Query interface {
	isOracleQuery_Query()
	MarshalTo([]byte) (int, error)
	Size() int
}

type OracleQuery_LatestSummary struct {
	LatestSummary *LatestSummaryQuery `protobuf:"bytes,1,opt,name=latest_summary,json=latestSummary,proto3,oneof" json:"latest_summary,omitempty"`
}

func (*OracleQuery_LatestSummary) isOracleQuery_Query() {}

func (m *OracleQuery) GetQuery() isOracleQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *OracleQuery) GetLatestSummary() *LatestSummaryQuery {
	if x, ok := m.GetQuery().(*OracleQuery_LatestSummary); ok {
		return x.LatestSummary
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OracleQuery) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OracleQuery_LatestSummary)(nil),
	}
}

// LatestSummaryQuery ...
type LatestSummaryQuery struct {
	// pool_id ...
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *LatestSummaryQuery) Reset()         { *m = LatestSummaryQuery{} }
func (m *LatestSummaryQuery) String() string { return proto.CompactTextString(m) }
func (*LatestSummaryQuery) ProtoMessage()    {}
func (*LatestSummaryQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_5044fc7099d40e0e, []int{3}
}
func (m *LatestSummaryQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestSummaryQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestSummaryQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestSummaryQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestSummaryQuery.Merge(m, src)
}
func (m *LatestSummaryQuery) XXX_Size() int {
	return m.Size()
}
func (m *LatestSummaryQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestSummaryQuery.DiscardUnknown(m)
}

var xxx_messageInfo_LatestSummaryQuery proto.InternalMessageInfo

func (m *LatestSummaryQuery) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "kyve.oracle.v1.Params")
	proto.RegisterType((*OracleMemo)(nil), "kyve.oracle.v1.OracleMemo")
	proto.RegisterType((*OracleQuery)(nil), "kyve.oracle.v1.OracleQuery")
	proto.RegisterType((*LatestSummaryQuery)(nil), "kyve.oracle.v1.LatestSummaryQuery")
}

func init() { proto.RegisterFile("kyve/oracle/v1/oracle.proto", fileDescriptor_5044fc7099d40e0e) }

var fileDescriptor_5044fc7099d40e0e = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x5b, 0xd0, 0x0d, 0x33, 0xdd, 0x45, 0x11, 0x14, 0x07, 0x9d, 0xd4, 0x1b, 0x41, 0x4c,
	0x98, 0x3e, 0x80, 0x50, 0x1c, 0x38, 0x36, 0x75, 0x76, 0x20, 0xe8, 0x4d, 0xc9, 0xb2, 0x43, 0x57,
	0xd6, 0x98, 0x9a, 0x64, 0xd3, 0xbe, 0x85, 0x8f, 0xb5, 0xcb, 0x5d, 0x8a, 0x17, 0x43, 0xb6, 0x17,
	0x91, 0xa6, 0x53, 0xa6, 0xde, 0x9d, 0xfc, 0xe7, 0x3b, 0xff, 0xf9, 0xc9, 0x41, 0xb5, 0x51, 0x36,
	0x01, 0x22, 0x24, 0x65, 0x09, 0x90, 0x49, 0x63, 0x55, 0xe1, 0x54, 0x0a, 0x2d, 0x9c, 0x6a, 0xde,
	0xc4, 0x2b, 0x69, 0xd2, 0x38, 0xd8, 0x8d, 0x44, 0x24, 0x4c, 0x8b, 0xe4, 0x55, 0x41, 0x79, 0x3d,
	0x54, 0xea, 0x52, 0x49, 0xb9, 0x72, 0x5a, 0xa8, 0x9a, 0xca, 0x98, 0x41, 0x98, 0x82, 0x0c, 0xfb,
	0x99, 0x86, 0x7d, 0xfb, 0xd0, 0x3e, 0xde, 0xf2, 0x8f, 0xa6, 0xf3, 0xba, 0xf5, 0x31, 0xaf, 0xd7,
	0x98, 0x50, 0x5c, 0x28, 0x35, 0x18, 0xe1, 0x58, 0x10, 0x4e, 0xf5, 0x10, 0x77, 0x20, 0xa2, 0x2c,
	0xbb, 0x04, 0x16, 0x6c, 0x9b, 0xd1, 0x2e, 0x48, 0x3f, 0xd3, 0xe0, 0x5d, 0x20, 0x74, 0x6b, 0xf6,
	0x5e, 0x03, 0x17, 0x4e, 0x03, 0x6d, 0x3e, 0x8f, 0x41, 0x66, 0xc6, 0xaf, 0x72, 0x56, 0xc3, 0xbf,
	0x83, 0xe1, 0x02, 0xbd, 0xcb, 0x91, 0xa0, 0x20, 0x3d, 0x86, 0x2a, 0x6b, 0xaa, 0xd3, 0x46, 0xd5,
	0x84, 0x6a, 0x50, 0x3a, 0x54, 0x63, 0xce, 0xe9, 0x8f, 0x95, 0xf7, 0xd7, 0xaa, 0x63, 0xa8, 0x5e,
	0x01, 0x99, 0xd9, 0x2b, 0x2b, 0xd8, 0x49, 0xd6, 0x55, 0xbf, 0xbc, 0x8a, 0xe3, 0x9d, 0x22, 0xe7,
	0x3f, 0xef, 0xec, 0xa1, 0x72, 0x2a, 0x44, 0x12, 0xc6, 0x03, 0xb3, 0x64, 0x23, 0x28, 0xe5, 0xcf,
	0xd6, 0xc0, 0x6f, 0x4e, 0x17, 0xae, 0x3d, 0x5b, 0xb8, 0xf6, 0xe7, 0xc2, 0xb5, 0xdf, 0x96, 0xae,
	0x35, 0x5b, 0xba, 0xd6, 0xfb, 0xd2, 0xb5, 0x1e, 0x4f, 0xa2, 0x58, 0x0f, 0xc7, 0x7d, 0xcc, 0x04,
	0x27, 0xed, 0x87, 0xfb, 0xe6, 0x0d, 0xe8, 0x17, 0x21, 0x47, 0x84, 0x0d, 0x69, 0xfc, 0x44, 0x5e,
	0xbf, 0x0f, 0xa4, 0xb3, 0x14, 0x54, 0xbf, 0x64, 0xfe, 0xfd, 0xfc, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0xc7, 0x4f, 0xb2, 0x29, 0xbc, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PricePerByte.Size()
		i -= size
		if _, err := m.PricePerByte.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OracleMemo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleMemo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleMemo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOracle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OracleQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Query != nil {
		{
			size := m.Query.Size()
			i -= size
			if _, err := m.Query.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OracleQuery_LatestSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleQuery_LatestSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LatestSummary != nil {
		{
			size, err := m.LatestSummary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOracle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *LatestSummaryQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestSummaryQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatestSummaryQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovOracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PricePerByte.Size()
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func (m *OracleMemo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func (m *OracleQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		n += m.Query.Size()
	}
	return n
}

func (m *OracleQuery_LatestSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestSummary != nil {
		l = m.LatestSummary.Size()
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}
func (m *LatestSummaryQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovOracle(uint64(m.PoolId))
	}
	return n
}

func sovOracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOracle(x uint64) (n int) {
	return sovOracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricePerByte", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PricePerByte.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleMemo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleMemo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleMemo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &OracleQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LatestSummaryQuery{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Query = &OracleQuery_LatestSummary{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestSummaryQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestSummaryQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestSummaryQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOracle = fmt.Errorf("proto: unexpected end of group")
)
