// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/delegation/v1beta1/delegation.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SlashType ...
type SlashType int32

const (
	// SLASH_TYPE_UNSPECIFIED ...
	SLASH_TYPE_UNSPECIFIED SlashType = 0
	// SLASH_TYPE_TIMEOUT ...
	SLASH_TYPE_TIMEOUT SlashType = 1
	// SLASH_TYPE_VOTE ...
	SLASH_TYPE_VOTE SlashType = 2
	// SLASH_TYPE_UPLOAD ...
	SLASH_TYPE_UPLOAD SlashType = 3
)

var SlashType_name = map[int32]string{
	0: "SLASH_TYPE_UNSPECIFIED",
	1: "SLASH_TYPE_TIMEOUT",
	2: "SLASH_TYPE_VOTE",
	3: "SLASH_TYPE_UPLOAD",
}

var SlashType_value = map[string]int32{
	"SLASH_TYPE_UNSPECIFIED": 0,
	"SLASH_TYPE_TIMEOUT":     1,
	"SLASH_TYPE_VOTE":        2,
	"SLASH_TYPE_UPLOAD":      3,
}

func (x SlashType) String() string {
	return proto.EnumName(SlashType_name, int32(x))
}

func (SlashType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e07f10cb3da486ac, []int{0}
}

// Delegator stores the information that one address has delegated to another address
// It stores important information for the F1-Fee distribution algorithm
type Delegator struct {
	// staker corresponds to a KYVE-staker on the protocol-side
	Staker string `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
	// delegator the user who delegate to the staker.
	// If staker and delegator are the same we call it: self-delegation
	Delegator string `protobuf:"bytes,2,opt,name=delegator,proto3" json:"delegator,omitempty"`
	// k_index is an internal index for the f1-distribution algorithm
	KIndex uint64 `protobuf:"varint,3,opt,name=k_index,json=kIndex,proto3" json:"k_index,omitempty"`
	// initial_amount of stake the user had when it delegated.
	// slashes can cause that the actual stake is lower.
	InitialAmount uint64 `protobuf:"varint,4,opt,name=initial_amount,json=initialAmount,proto3" json:"initial_amount,omitempty"`
}

func (m *Delegator) Reset()         { *m = Delegator{} }
func (m *Delegator) String() string { return proto.CompactTextString(m) }
func (*Delegator) ProtoMessage()    {}
func (*Delegator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e07f10cb3da486ac, []int{0}
}
func (m *Delegator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegator.Merge(m, src)
}
func (m *Delegator) XXX_Size() int {
	return m.Size()
}
func (m *Delegator) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegator.DiscardUnknown(m)
}

var xxx_messageInfo_Delegator proto.InternalMessageInfo

func (m *Delegator) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *Delegator) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *Delegator) GetKIndex() uint64 {
	if m != nil {
		return m.KIndex
	}
	return 0
}

func (m *Delegator) GetInitialAmount() uint64 {
	if m != nil {
		return m.InitialAmount
	}
	return 0
}

// DelegationEntry represents an entry according to the F1-Fee-Distribution algorithm.
// Take a look at x/delegation/keeper/logic_f1distribution.go for more details
type DelegationEntry struct {
	// staker on protocol level
	Staker string `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
	// k_index is the of the period this entry ends
	KIndex uint64 `protobuf:"varint,2,opt,name=k_index,json=kIndex,proto3" json:"k_index,omitempty"`
	// value is the quotient of collected rewards and total stake according to F1-distribution
	Value github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,3,rep,name=value,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"value"`
}

func (m *DelegationEntry) Reset()         { *m = DelegationEntry{} }
func (m *DelegationEntry) String() string { return proto.CompactTextString(m) }
func (*DelegationEntry) ProtoMessage()    {}
func (*DelegationEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e07f10cb3da486ac, []int{1}
}
func (m *DelegationEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationEntry.Merge(m, src)
}
func (m *DelegationEntry) XXX_Size() int {
	return m.Size()
}
func (m *DelegationEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationEntry proto.InternalMessageInfo

func (m *DelegationEntry) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *DelegationEntry) GetKIndex() uint64 {
	if m != nil {
		return m.KIndex
	}
	return 0
}

func (m *DelegationEntry) GetValue() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Value
	}
	return nil
}

// DelegationPoolData stores general delegation information for every staker
type DelegationData struct {
	// Every staker has one DelegationData
	Staker string `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
	// current_rewards ...
	CurrentRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=current_rewards,json=currentRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"current_rewards"`
	// total_delegation ...
	TotalDelegation uint64 `protobuf:"varint,3,opt,name=total_delegation,json=totalDelegation,proto3" json:"total_delegation,omitempty"`
	// latest_index_k ...
	LatestIndexK uint64 `protobuf:"varint,4,opt,name=latest_index_k,json=latestIndexK,proto3" json:"latest_index_k,omitempty"`
	// delegator_count the amount of different addresses delegating to the staker
	DelegatorCount uint64 `protobuf:"varint,5,opt,name=delegator_count,json=delegatorCount,proto3" json:"delegator_count,omitempty"`
	// latest_index_was_undelegation helps indicates when an entry can be deleted
	LatestIndexWasUndelegation bool `protobuf:"varint,6,opt,name=latest_index_was_undelegation,json=latestIndexWasUndelegation,proto3" json:"latest_index_was_undelegation,omitempty"`
}

func (m *DelegationData) Reset()         { *m = DelegationData{} }
func (m *DelegationData) String() string { return proto.CompactTextString(m) }
func (*DelegationData) ProtoMessage()    {}
func (*DelegationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e07f10cb3da486ac, []int{2}
}
func (m *DelegationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationData.Merge(m, src)
}
func (m *DelegationData) XXX_Size() int {
	return m.Size()
}
func (m *DelegationData) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationData.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationData proto.InternalMessageInfo

func (m *DelegationData) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *DelegationData) GetCurrentRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CurrentRewards
	}
	return nil
}

func (m *DelegationData) GetTotalDelegation() uint64 {
	if m != nil {
		return m.TotalDelegation
	}
	return 0
}

func (m *DelegationData) GetLatestIndexK() uint64 {
	if m != nil {
		return m.LatestIndexK
	}
	return 0
}

func (m *DelegationData) GetDelegatorCount() uint64 {
	if m != nil {
		return m.DelegatorCount
	}
	return 0
}

func (m *DelegationData) GetLatestIndexWasUndelegation() bool {
	if m != nil {
		return m.LatestIndexWasUndelegation
	}
	return false
}

// DelegationSlash represents an f1-slash
// these entries needs to be iterated to obtain the current amount of the actual stake
// Every staker can have n slash-entries
type DelegationSlash struct {
	// staker who got slashed
	Staker string `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
	// k_index for f1-algorithm
	KIndex uint64 `protobuf:"varint,2,opt,name=k_index,json=kIndex,proto3" json:"k_index,omitempty"`
	// fraction that got slashed
	Fraction cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=fraction,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"fraction"`
}

func (m *DelegationSlash) Reset()         { *m = DelegationSlash{} }
func (m *DelegationSlash) String() string { return proto.CompactTextString(m) }
func (*DelegationSlash) ProtoMessage()    {}
func (*DelegationSlash) Descriptor() ([]byte, []int) {
	return fileDescriptor_e07f10cb3da486ac, []int{3}
}
func (m *DelegationSlash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationSlash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationSlash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationSlash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationSlash.Merge(m, src)
}
func (m *DelegationSlash) XXX_Size() int {
	return m.Size()
}
func (m *DelegationSlash) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationSlash.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationSlash proto.InternalMessageInfo

func (m *DelegationSlash) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *DelegationSlash) GetKIndex() uint64 {
	if m != nil {
		return m.KIndex
	}
	return 0
}

// UndelegationQueueEntry ...
type UndelegationQueueEntry struct {
	// index ...
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// staker ...
	Staker string `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	// delegator ...
	Delegator string `protobuf:"bytes,3,opt,name=delegator,proto3" json:"delegator,omitempty"`
	// amount ...
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// creation_time ...
	CreationTime uint64 `protobuf:"varint,5,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
}

func (m *UndelegationQueueEntry) Reset()         { *m = UndelegationQueueEntry{} }
func (m *UndelegationQueueEntry) String() string { return proto.CompactTextString(m) }
func (*UndelegationQueueEntry) ProtoMessage()    {}
func (*UndelegationQueueEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e07f10cb3da486ac, []int{4}
}
func (m *UndelegationQueueEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegationQueueEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegationQueueEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegationQueueEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegationQueueEntry.Merge(m, src)
}
func (m *UndelegationQueueEntry) XXX_Size() int {
	return m.Size()
}
func (m *UndelegationQueueEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegationQueueEntry.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegationQueueEntry proto.InternalMessageInfo

func (m *UndelegationQueueEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *UndelegationQueueEntry) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

func (m *UndelegationQueueEntry) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *UndelegationQueueEntry) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *UndelegationQueueEntry) GetCreationTime() uint64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

// QueueState ...
type QueueState struct {
	// low_index ...
	LowIndex uint64 `protobuf:"varint,1,opt,name=low_index,json=lowIndex,proto3" json:"low_index,omitempty"`
	// high_index ...
	HighIndex uint64 `protobuf:"varint,2,opt,name=high_index,json=highIndex,proto3" json:"high_index,omitempty"`
}

func (m *QueueState) Reset()         { *m = QueueState{} }
func (m *QueueState) String() string { return proto.CompactTextString(m) }
func (*QueueState) ProtoMessage()    {}
func (*QueueState) Descriptor() ([]byte, []int) {
	return fileDescriptor_e07f10cb3da486ac, []int{5}
}
func (m *QueueState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueState.Merge(m, src)
}
func (m *QueueState) XXX_Size() int {
	return m.Size()
}
func (m *QueueState) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueState.DiscardUnknown(m)
}

var xxx_messageInfo_QueueState proto.InternalMessageInfo

func (m *QueueState) GetLowIndex() uint64 {
	if m != nil {
		return m.LowIndex
	}
	return 0
}

func (m *QueueState) GetHighIndex() uint64 {
	if m != nil {
		return m.HighIndex
	}
	return 0
}

// RedelegationCooldown ...
type RedelegationCooldown struct {
	// low_index ...
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// high_index ...
	CreationDate uint64 `protobuf:"varint,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (m *RedelegationCooldown) Reset()         { *m = RedelegationCooldown{} }
func (m *RedelegationCooldown) String() string { return proto.CompactTextString(m) }
func (*RedelegationCooldown) ProtoMessage()    {}
func (*RedelegationCooldown) Descriptor() ([]byte, []int) {
	return fileDescriptor_e07f10cb3da486ac, []int{6}
}
func (m *RedelegationCooldown) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedelegationCooldown) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedelegationCooldown.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedelegationCooldown) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedelegationCooldown.Merge(m, src)
}
func (m *RedelegationCooldown) XXX_Size() int {
	return m.Size()
}
func (m *RedelegationCooldown) XXX_DiscardUnknown() {
	xxx_messageInfo_RedelegationCooldown.DiscardUnknown(m)
}

var xxx_messageInfo_RedelegationCooldown proto.InternalMessageInfo

func (m *RedelegationCooldown) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RedelegationCooldown) GetCreationDate() uint64 {
	if m != nil {
		return m.CreationDate
	}
	return 0
}

func init() {
	proto.RegisterEnum("kyve.delegation.v1beta1.SlashType", SlashType_name, SlashType_value)
	proto.RegisterType((*Delegator)(nil), "kyve.delegation.v1beta1.Delegator")
	proto.RegisterType((*DelegationEntry)(nil), "kyve.delegation.v1beta1.DelegationEntry")
	proto.RegisterType((*DelegationData)(nil), "kyve.delegation.v1beta1.DelegationData")
	proto.RegisterType((*DelegationSlash)(nil), "kyve.delegation.v1beta1.DelegationSlash")
	proto.RegisterType((*UndelegationQueueEntry)(nil), "kyve.delegation.v1beta1.UndelegationQueueEntry")
	proto.RegisterType((*QueueState)(nil), "kyve.delegation.v1beta1.QueueState")
	proto.RegisterType((*RedelegationCooldown)(nil), "kyve.delegation.v1beta1.RedelegationCooldown")
}

func init() {
	proto.RegisterFile("kyve/delegation/v1beta1/delegation.proto", fileDescriptor_e07f10cb3da486ac)
}

var fileDescriptor_e07f10cb3da486ac = []byte{
	// 764 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcf, 0x4f, 0xdb, 0x48,
	0x14, 0x8e, 0x13, 0x08, 0xe4, 0x2d, 0x24, 0x61, 0x96, 0x0d, 0xd9, 0x00, 0x26, 0x0a, 0xbb, 0xda,
	0x2c, 0xab, 0xb5, 0xc5, 0xae, 0x56, 0xda, 0x5b, 0x15, 0xe2, 0x54, 0x44, 0x50, 0xa0, 0xf9, 0x41,
	0x45, 0x2f, 0xd6, 0xc4, 0x9e, 0x26, 0x96, 0x1d, 0x0f, 0xb5, 0x27, 0x84, 0x1c, 0xab, 0x5e, 0x7a,
	0xec, 0xbf, 0x50, 0xf5, 0x52, 0xf5, 0xc4, 0x9f, 0xc1, 0x91, 0x63, 0xd5, 0x03, 0x45, 0x70, 0xe8,
	0xbf, 0x51, 0x65, 0xec, 0x24, 0x93, 0xaa, 0x48, 0xed, 0x25, 0xf1, 0xfb, 0xe6, 0xf9, 0x7d, 0xdf,
	0x7c, 0xef, 0x3d, 0x43, 0xd1, 0x1e, 0x9c, 0x11, 0xd5, 0x24, 0x0e, 0x69, 0x63, 0x66, 0x51, 0x57,
	0x3d, 0xdb, 0x6e, 0x11, 0x86, 0xb7, 0x05, 0x48, 0x39, 0xf5, 0x28, 0xa3, 0x68, 0x65, 0x98, 0xa9,
	0x08, 0x70, 0x98, 0x99, 0x5b, 0xc2, 0x5d, 0xcb, 0xa5, 0x2a, 0xff, 0x0d, 0x72, 0x73, 0xb2, 0x41,
	0xfd, 0x2e, 0xf5, 0xd5, 0x16, 0xf6, 0xc9, 0xb8, 0xa2, 0x41, 0xad, 0xb0, 0x56, 0x6e, 0xb9, 0x4d,
	0xdb, 0x94, 0x3f, 0xaa, 0xc3, 0xa7, 0x00, 0x2d, 0xbc, 0x90, 0x20, 0xa1, 0x05, 0xf5, 0xa9, 0x87,
	0x32, 0x10, 0xf7, 0x19, 0xb6, 0x89, 0x97, 0x95, 0xf2, 0x52, 0x31, 0x51, 0x0b, 0x23, 0xb4, 0x06,
	0x09, 0x73, 0x94, 0x94, 0x8d, 0xf2, 0xa3, 0x09, 0x80, 0x56, 0x60, 0xce, 0xd6, 0x2d, 0xd7, 0x24,
	0xe7, 0xd9, 0x58, 0x5e, 0x2a, 0xce, 0xd4, 0xe2, 0x76, 0x75, 0x18, 0xa1, 0xdf, 0x21, 0x69, 0xb9,
	0x16, 0xb3, 0xb0, 0xa3, 0xe3, 0x2e, 0xed, 0xb9, 0x2c, 0x3b, 0xc3, 0xcf, 0x17, 0x43, 0xb4, 0xc4,
	0xc1, 0xc2, 0x85, 0x04, 0x29, 0x6d, 0x7c, 0xc7, 0x8a, 0xcb, 0xbc, 0xc1, 0xbd, 0x4a, 0x04, 0xae,
	0xe8, 0x14, 0x97, 0x03, 0xb3, 0x67, 0xd8, 0xe9, 0x91, 0x6c, 0x2c, 0x1f, 0x2b, 0xfe, 0xf4, 0xcf,
	0x9a, 0x12, 0xd8, 0xa1, 0x0c, 0xed, 0x18, 0xd9, 0xa6, 0x68, 0xc4, 0x28, 0x53, 0xcb, 0xdd, 0xf9,
	0xff, 0xf2, 0x7a, 0x23, 0xf2, 0xfe, 0xd3, 0xc6, 0x5f, 0x6d, 0x8b, 0x75, 0x7a, 0x2d, 0xc5, 0xa0,
	0x5d, 0x35, 0xb4, 0x2f, 0xf8, 0xfb, 0xdb, 0x37, 0x6d, 0x95, 0x0d, 0x4e, 0x89, 0x3f, 0x7a, 0xc7,
	0x7f, 0xf7, 0xf9, 0x62, 0x4b, 0xaa, 0x05, 0x24, 0x85, 0x9b, 0x28, 0x24, 0x27, 0x92, 0x35, 0xcc,
	0xf0, 0xbd, 0x8a, 0x07, 0x90, 0x32, 0x7a, 0x9e, 0x47, 0x5c, 0xa6, 0x7b, 0xa4, 0x8f, 0x3d, 0xd3,
	0xcf, 0x46, 0xb9, 0xc4, 0x5f, 0xbf, 0x29, 0x91, 0xeb, 0xfb, 0x2f, 0xd4, 0x57, 0xfc, 0x0e, 0x7d,
	0x82, 0xb8, 0x64, 0x48, 0x54, 0x0b, 0x78, 0xd0, 0x9f, 0x90, 0x66, 0x94, 0x61, 0x47, 0x9f, 0x4c,
	0x50, 0xd8, 0xa1, 0x14, 0xc7, 0x27, 0x37, 0x40, 0xbf, 0x41, 0xd2, 0xc1, 0x8c, 0xf8, 0x2c, 0x30,
	0x57, 0xb7, 0xc3, 0x56, 0x2d, 0x04, 0x28, 0xf7, 0x78, 0x0f, 0xfd, 0x01, 0xa9, 0x71, 0xdb, 0x75,
	0x83, 0x77, 0x74, 0x96, 0xa7, 0x25, 0xc7, 0x70, 0x79, 0x88, 0xa2, 0x12, 0xac, 0x4f, 0x95, 0xeb,
	0x63, 0x5f, 0xef, 0xb9, 0x82, 0x8c, 0x78, 0x5e, 0x2a, 0xce, 0xd7, 0x72, 0x42, 0xf5, 0x27, 0xd8,
	0x6f, 0x0a, 0x19, 0x85, 0x97, 0x53, 0x53, 0x51, 0x77, 0xb0, 0xdf, 0xf9, 0xf1, 0xa9, 0x78, 0x00,
	0xf3, 0xcf, 0x3c, 0x6c, 0x8c, 0x6f, 0x9e, 0xd8, 0xd9, 0x1c, 0x5a, 0xfb, 0xf1, 0x7a, 0x63, 0x35,
	0x30, 0xd2, 0x37, 0x6d, 0xc5, 0xa2, 0x6a, 0x17, 0xb3, 0x8e, 0xb2, 0x4f, 0xda, 0xd8, 0x18, 0x68,
	0xc4, 0xa8, 0x8d, 0x5f, 0x2a, 0xbc, 0x91, 0x20, 0x23, 0xca, 0x7a, 0xdc, 0x23, 0x3d, 0x12, 0x8c,
	0xe8, 0x32, 0xcc, 0x06, 0x94, 0x12, 0xa7, 0x0c, 0x02, 0x41, 0x62, 0xf4, 0xfe, 0x15, 0x8a, 0x7d,
	0xbd, 0x42, 0x19, 0x88, 0x4f, 0x6d, 0x48, 0x18, 0xa1, 0x4d, 0x58, 0x34, 0x3c, 0xc2, 0x99, 0x75,
	0x66, 0x75, 0x49, 0x68, 0xf7, 0xc2, 0x08, 0x6c, 0x58, 0x5d, 0x52, 0xd8, 0x05, 0xe0, 0xb2, 0xea,
	0x0c, 0x33, 0x82, 0x56, 0x21, 0xe1, 0xd0, 0xbe, 0x2e, 0x4a, 0x9b, 0x77, 0x68, 0x3f, 0xf0, 0x63,
	0x1d, 0xa0, 0x63, 0xb5, 0x3b, 0x53, 0x5e, 0x25, 0x86, 0x08, 0x3f, 0x2e, 0x34, 0x61, 0xb9, 0x46,
	0x26, 0x97, 0x2d, 0x53, 0xea, 0x98, 0xb4, 0xef, 0xa2, 0x2c, 0xcc, 0x61, 0xd3, 0xf4, 0x88, 0xef,
	0x87, 0xc6, 0x8f, 0xc2, 0x29, 0x81, 0x26, 0x66, 0x24, 0xac, 0x39, 0x16, 0xa8, 0x61, 0x46, 0xb6,
	0x9e, 0x43, 0x82, 0xf7, 0xaf, 0x31, 0x38, 0x25, 0x28, 0x07, 0x99, 0xfa, 0x7e, 0xa9, 0xbe, 0xab,
	0x37, 0x4e, 0x8e, 0x2a, 0x7a, 0xf3, 0xa0, 0x7e, 0x54, 0x29, 0x57, 0x1f, 0x56, 0x2b, 0x5a, 0x3a,
	0x82, 0x32, 0x80, 0x84, 0xb3, 0x46, 0xf5, 0x51, 0xe5, 0xb0, 0xd9, 0x48, 0x4b, 0xe8, 0x67, 0x48,
	0x09, 0xf8, 0xf1, 0x61, 0xa3, 0x92, 0x8e, 0xa2, 0x5f, 0x60, 0x49, 0x2c, 0x74, 0xb4, 0x7f, 0x58,
	0xd2, 0xd2, 0xb1, 0xdc, 0xcc, 0xab, 0xb7, 0x72, 0x64, 0xa7, 0x7a, 0x79, 0x2b, 0x4b, 0x57, 0xb7,
	0xb2, 0x74, 0x73, 0x2b, 0x4b, 0xaf, 0xef, 0xe4, 0xc8, 0xd5, 0x9d, 0x1c, 0xf9, 0x70, 0x27, 0x47,
	0x9e, 0xaa, 0xc2, 0x4e, 0xed, 0x9d, 0x1c, 0x57, 0x0e, 0x08, 0xeb, 0x53, 0xcf, 0x56, 0x8d, 0x0e,
	0xb6, 0x5c, 0xf5, 0x5c, 0xfc, 0x2e, 0xf3, 0x05, 0x6b, 0xc5, 0xf9, 0x97, 0xf2, 0xdf, 0x2f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x33, 0x14, 0xb7, 0x80, 0xb7, 0x05, 0x00, 0x00,
}

func (m *Delegator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InitialAmount != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.InitialAmount))
		i--
		dAtA[i] = 0x20
	}
	if m.KIndex != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.KIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Value[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.KIndex != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.KIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestIndexWasUndelegation {
		i--
		if m.LatestIndexWasUndelegation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.DelegatorCount != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.DelegatorCount))
		i--
		dAtA[i] = 0x28
	}
	if m.LatestIndexK != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.LatestIndexK))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalDelegation != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.TotalDelegation))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CurrentRewards) > 0 {
		for iNdEx := len(m.CurrentRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationSlash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationSlash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationSlash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Fraction.Size()
		i -= size
		if _, err := m.Fraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.KIndex != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.KIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegationQueueEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegationQueueEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegationQueueEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreationTime != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.CreationTime))
		i--
		dAtA[i] = 0x28
	}
	if m.Amount != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueueState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HighIndex != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.HighIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.LowIndex != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.LowIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RedelegationCooldown) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedelegationCooldown) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedelegationCooldown) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreationDate != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.CreationDate))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDelegation(dAtA []byte, offset int, v uint64) int {
	offset -= sovDelegation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Delegator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.KIndex != 0 {
		n += 1 + sovDelegation(uint64(m.KIndex))
	}
	if m.InitialAmount != 0 {
		n += 1 + sovDelegation(uint64(m.InitialAmount))
	}
	return n
}

func (m *DelegationEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.KIndex != 0 {
		n += 1 + sovDelegation(uint64(m.KIndex))
	}
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	return n
}

func (m *DelegationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if len(m.CurrentRewards) > 0 {
		for _, e := range m.CurrentRewards {
			l = e.Size()
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	if m.TotalDelegation != 0 {
		n += 1 + sovDelegation(uint64(m.TotalDelegation))
	}
	if m.LatestIndexK != 0 {
		n += 1 + sovDelegation(uint64(m.LatestIndexK))
	}
	if m.DelegatorCount != 0 {
		n += 1 + sovDelegation(uint64(m.DelegatorCount))
	}
	if m.LatestIndexWasUndelegation {
		n += 2
	}
	return n
}

func (m *DelegationSlash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.KIndex != 0 {
		n += 1 + sovDelegation(uint64(m.KIndex))
	}
	l = m.Fraction.Size()
	n += 1 + l + sovDelegation(uint64(l))
	return n
}

func (m *UndelegationQueueEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovDelegation(uint64(m.Index))
	}
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovDelegation(uint64(m.Amount))
	}
	if m.CreationTime != 0 {
		n += 1 + sovDelegation(uint64(m.CreationTime))
	}
	return n
}

func (m *QueueState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LowIndex != 0 {
		n += 1 + sovDelegation(uint64(m.LowIndex))
	}
	if m.HighIndex != 0 {
		n += 1 + sovDelegation(uint64(m.HighIndex))
	}
	return n
}

func (m *RedelegationCooldown) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.CreationDate != 0 {
		n += 1 + sovDelegation(uint64(m.CreationDate))
	}
	return n
}

func sovDelegation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDelegation(x uint64) (n int) {
	return sovDelegation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Delegator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KIndex", wireType)
			}
			m.KIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialAmount", wireType)
			}
			m.InitialAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KIndex", wireType)
			}
			m.KIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, types.DecCoin{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentRewards = append(m.CurrentRewards, types.Coin{})
			if err := m.CurrentRewards[len(m.CurrentRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegation", wireType)
			}
			m.TotalDelegation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDelegation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestIndexK", wireType)
			}
			m.LatestIndexK = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestIndexK |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorCount", wireType)
			}
			m.DelegatorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegatorCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestIndexWasUndelegation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LatestIndexWasUndelegation = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationSlash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationSlash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationSlash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KIndex", wireType)
			}
			m.KIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegationQueueEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegationQueueEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegationQueueEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			m.CreationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowIndex", wireType)
			}
			m.LowIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighIndex", wireType)
			}
			m.HighIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedelegationCooldown) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedelegationCooldown: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedelegationCooldown: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			m.CreationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDelegation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDelegation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDelegation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDelegation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDelegation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDelegation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDelegation = fmt.Errorf("proto: unexpected end of group")
)
