// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/query/v1beta1/params.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/KYVENetwork/chain/x/bundles/types"
	types1 "github.com/KYVENetwork/chain/x/delegation/types"
	types2 "github.com/KYVENetwork/chain/x/global/types"
	types3 "github.com/KYVENetwork/chain/x/stakers/types"
	v1 "github.com/cosmos/cosmos-sdk/x/gov/types/v1"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest ...
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5269c0a69f1d3d4, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse ...
type QueryParamsResponse struct {
	// bundles_params ...
	BundlesParams *types.Params `protobuf:"bytes,1,opt,name=bundles_params,json=bundlesParams,proto3" json:"bundles_params,omitempty"`
	// delegation_params ...
	DelegationParams *types1.Params `protobuf:"bytes,2,opt,name=delegation_params,json=delegationParams,proto3" json:"delegation_params,omitempty"`
	// global_params ...
	GlobalParams *types2.Params `protobuf:"bytes,3,opt,name=global_params,json=globalParams,proto3" json:"global_params,omitempty"`
	// gov_params ...
	GovParams *v1.Params `protobuf:"bytes,4,opt,name=gov_params,json=govParams,proto3" json:"gov_params,omitempty"`
	// stakers_params ...
	StakersParams *types3.Params `protobuf:"bytes,5,opt,name=stakers_params,json=stakersParams,proto3" json:"stakers_params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5269c0a69f1d3d4, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetBundlesParams() *types.Params {
	if m != nil {
		return m.BundlesParams
	}
	return nil
}

func (m *QueryParamsResponse) GetDelegationParams() *types1.Params {
	if m != nil {
		return m.DelegationParams
	}
	return nil
}

func (m *QueryParamsResponse) GetGlobalParams() *types2.Params {
	if m != nil {
		return m.GlobalParams
	}
	return nil
}

func (m *QueryParamsResponse) GetGovParams() *v1.Params {
	if m != nil {
		return m.GovParams
	}
	return nil
}

func (m *QueryParamsResponse) GetStakersParams() *types3.Params {
	if m != nil {
		return m.StakersParams
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "kyve.query.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "kyve.query.v1beta1.QueryParamsResponse")
}

func init() { proto.RegisterFile("kyve/query/v1beta1/params.proto", fileDescriptor_b5269c0a69f1d3d4) }

var fileDescriptor_b5269c0a69f1d3d4 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x4f, 0xdb, 0x30,
	0x18, 0xc6, 0x9b, 0x6e, 0xab, 0x34, 0x77, 0xad, 0xb6, 0x6c, 0xd3, 0xa6, 0xac, 0x4a, 0xbb, 0x68,
	0xda, 0x26, 0x0e, 0xb6, 0x5a, 0xf8, 0x00, 0x88, 0xc2, 0x09, 0x84, 0x80, 0x03, 0x12, 0x5c, 0x90,
	0xd3, 0x5a, 0x6e, 0xd4, 0x34, 0x4e, 0x63, 0x27, 0xd0, 0x03, 0x17, 0xce, 0x1c, 0x90, 0xf8, 0x52,
	0x1c, 0x2b, 0x71, 0xe1, 0x88, 0x5a, 0xf8, 0x1e, 0x28, 0xb6, 0xd3, 0xff, 0x88, 0x53, 0xeb, 0xf7,
	0x7d, 0x9e, 0xdf, 0x1b, 0x3f, 0xaf, 0x41, 0xb5, 0x3b, 0x48, 0x08, 0xea, 0xc7, 0x24, 0x1a, 0xa0,
	0xa4, 0xee, 0x12, 0x81, 0xeb, 0x28, 0xc4, 0x11, 0xee, 0x71, 0x18, 0x46, 0x4c, 0x30, 0xd3, 0x4c,
	0x05, 0x50, 0x0a, 0xa0, 0x16, 0x58, 0x3f, 0x5a, 0x8c, 0xf7, 0x18, 0x47, 0x94, 0x25, 0x28, 0xa9,
	0xa7, 0x3f, 0x4a, 0x6c, 0x55, 0x28, 0x63, 0xd4, 0x27, 0x08, 0x87, 0x1e, 0xc2, 0x41, 0xc0, 0x04,
	0x16, 0x1e, 0x0b, 0x34, 0xca, 0xfa, 0x2d, 0x67, 0xb9, 0x71, 0xd0, 0xf6, 0x09, 0x5f, 0x39, 0xcd,
	0xfa, 0x23, 0x25, 0x6d, 0xe2, 0x13, 0x2a, 0xad, 0xab, 0x55, 0x35, 0xa9, 0xa2, 0x3e, 0x73, 0xb1,
	0x3f, 0x51, 0xa8, 0xe3, 0xdc, 0x28, 0x2e, 0x70, 0x97, 0x44, 0xab, 0x47, 0x39, 0xdf, 0x80, 0x79,
	0x98, 0xde, 0xea, 0x40, 0x16, 0x8f, 0x48, 0x3f, 0x26, 0x5c, 0x38, 0xcf, 0x79, 0xf0, 0x75, 0xae,
	0xcc, 0x43, 0x16, 0x70, 0x62, 0x36, 0x41, 0x59, 0x7f, 0xf8, 0x99, 0xa2, 0xfc, 0x34, 0x6a, 0xc6,
	0xff, 0x62, 0xa3, 0x02, 0x65, 0x3e, 0xba, 0x97, 0x25, 0x04, 0xb5, 0xbb, 0xa4, 0xeb, 0xea, 0x68,
	0xee, 0x81, 0x2f, 0xd3, 0xab, 0x65, 0x9c, 0xbc, 0xe4, 0x54, 0x15, 0x67, 0xda, 0x5e, 0x44, 0x7d,
	0x9e, 0xb6, 0x34, 0x6d, 0x13, 0x94, 0xd4, 0x9d, 0x33, 0xd2, 0x3b, 0x49, 0xfa, 0xa5, 0x48, 0x3a,
	0x8e, 0x05, 0xca, 0x27, 0x55, 0xd6, 0x84, 0x0d, 0x00, 0x28, 0x4b, 0x32, 0xfb, 0x7b, 0x69, 0xff,
	0x0e, 0xd5, 0x72, 0x61, 0xba, 0xd5, 0x64, 0x62, 0xfc, 0x48, 0x59, 0xa2, 0x5d, 0x4d, 0x50, 0xd6,
	0xc1, 0x66, 0xce, 0x0f, 0xb3, 0x51, 0xe8, 0xde, 0x52, 0x14, 0xba, 0xae, 0x8e, 0x8d, 0x6b, 0x03,
	0x14, 0x67, 0x72, 0x36, 0x2f, 0x41, 0x41, 0xff, 0xfb, 0x0b, 0x97, 0x5f, 0x1c, 0x5c, 0xde, 0x94,
	0xf5, 0xef, 0x4d, 0x9d, 0x5a, 0x9d, 0xe3, 0x5c, 0xdd, 0x3f, 0xdd, 0xe6, 0x2b, 0xa6, 0x85, 0x5e,
	0x7d, 0xeb, 0x5b, 0xdb, 0x77, 0x23, 0xdb, 0x18, 0x8e, 0x6c, 0xe3, 0x71, 0x64, 0x1b, 0x37, 0x63,
	0x3b, 0x37, 0x1c, 0xdb, 0xb9, 0x87, 0xb1, 0x9d, 0x3b, 0x5d, 0xa3, 0x9e, 0xe8, 0xc4, 0x2e, 0x6c,
	0xb1, 0x1e, 0xda, 0x3d, 0x39, 0xde, 0xd9, 0x27, 0xe2, 0x9c, 0x45, 0x5d, 0xd4, 0xea, 0x60, 0x2f,
	0x40, 0x17, 0x1a, 0x27, 0x06, 0x21, 0xe1, 0x6e, 0x41, 0xbe, 0xac, 0xf5, 0x97, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xdb, 0x64, 0x66, 0xff, 0x55, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryParamsClient is the client API for QueryParams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryParamsClient interface {
	// Pools queries for all pools.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryParamsClient struct {
	cc grpc1.ClientConn
}

func NewQueryParamsClient(cc grpc1.ClientConn) QueryParamsClient {
	return &queryParamsClient{cc}
}

func (c *queryParamsClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/kyve.query.v1beta1.QueryParams/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryParamsServer is the server API for QueryParams service.
type QueryParamsServer interface {
	// Pools queries for all pools.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryParamsServer can be embedded to have forward compatible implementations.
type UnimplementedQueryParamsServer struct {
}

func (*UnimplementedQueryParamsServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryParamsServer(s grpc1.Server, srv QueryParamsServer) {
	s.RegisterService(&_QueryParams_serviceDesc, srv)
}

func _QueryParams_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryParamsServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.query.v1beta1.QueryParams/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryParamsServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryParams_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kyve.query.v1beta1.QueryParams",
	HandlerType: (*QueryParamsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _QueryParams_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kyve/query/v1beta1/params.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakersParams != nil {
		{
			size, err := m.StakersParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.GovParams != nil {
		{
			size, err := m.GovParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.GlobalParams != nil {
		{
			size, err := m.GlobalParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DelegationParams != nil {
		{
			size, err := m.DelegationParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BundlesParams != nil {
		{
			size, err := m.BundlesParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BundlesParams != nil {
		l = m.BundlesParams.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.DelegationParams != nil {
		l = m.DelegationParams.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.GlobalParams != nil {
		l = m.GlobalParams.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.GovParams != nil {
		l = m.GovParams.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	if m.StakersParams != nil {
		l = m.StakersParams.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundlesParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BundlesParams == nil {
				m.BundlesParams = &types.Params{}
			}
			if err := m.BundlesParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelegationParams == nil {
				m.DelegationParams = &types1.Params{}
			}
			if err := m.DelegationParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalParams == nil {
				m.GlobalParams = &types2.Params{}
			}
			if err := m.GlobalParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GovParams == nil {
				m.GovParams = &v1.Params{}
			}
			if err := m.GovParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakersParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakersParams == nil {
				m.StakersParams = &types3.Params{}
			}
			if err := m.StakersParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
