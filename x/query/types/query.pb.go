// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/query/v1beta1/query.proto

package types

import (
	fmt "fmt"
	types "github.com/KYVENetwork/chain/x/pool/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BasicPool contains the necessary properties need for a pool
// to be displayed in the UI
type BasicPool struct {
	// id is the ID of the pool
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name of the pool
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// runtime for the protocol nodes
	// like evm, bitcoin, etc.
	Runtime string `protobuf:"bytes,3,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// logo of the pool
	Logo string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	// operating_cost is the base payout for each bundle reward
	OperatingCost uint64 `protobuf:"varint,5,opt,name=operating_cost,json=operatingCost,proto3" json:"operating_cost,omitempty"`
	// upload_interval is the interval bundles get created
	UploadInterval uint64 `protobuf:"varint,6,opt,name=upload_interval,json=uploadInterval,proto3" json:"upload_interval,omitempty"`
	// total_funds of the pool. If the pool runs
	// out of funds no more bundles will be produced
	TotalFunds uint64 `protobuf:"varint,7,opt,name=total_funds,json=totalFunds,proto3" json:"total_funds,omitempty"`
	// total_delegation of the pool
	TotalDelegation uint64 `protobuf:"varint,8,opt,name=total_delegation,json=totalDelegation,proto3" json:"total_delegation,omitempty"`
	// status of the pool if pool is able
	// to produce bundles, etc.
	Status types.PoolStatus `protobuf:"varint,9,opt,name=status,proto3,enum=kyve.pool.v1beta1.PoolStatus" json:"status,omitempty"`
}

func (m *BasicPool) Reset()         { *m = BasicPool{} }
func (m *BasicPool) String() string { return proto.CompactTextString(m) }
func (*BasicPool) ProtoMessage()    {}
func (*BasicPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b41255feae93a15, []int{0}
}
func (m *BasicPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasicPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasicPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicPool.Merge(m, src)
}
func (m *BasicPool) XXX_Size() int {
	return m.Size()
}
func (m *BasicPool) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicPool.DiscardUnknown(m)
}

var xxx_messageInfo_BasicPool proto.InternalMessageInfo

func (m *BasicPool) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BasicPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BasicPool) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *BasicPool) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *BasicPool) GetOperatingCost() uint64 {
	if m != nil {
		return m.OperatingCost
	}
	return 0
}

func (m *BasicPool) GetUploadInterval() uint64 {
	if m != nil {
		return m.UploadInterval
	}
	return 0
}

func (m *BasicPool) GetTotalFunds() uint64 {
	if m != nil {
		return m.TotalFunds
	}
	return 0
}

func (m *BasicPool) GetTotalDelegation() uint64 {
	if m != nil {
		return m.TotalDelegation
	}
	return 0
}

func (m *BasicPool) GetStatus() types.PoolStatus {
	if m != nil {
		return m.Status
	}
	return types.POOL_STATUS_UNSPECIFIED
}

// FullStaker aggregates information from the staker and its delegators
// as well as pending queue entries into one object.
// It contains almost all needed information for a convenient usage
type FullStaker struct {
	// address of the staker
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// metadata as logo, moniker, etc.
	Metadata *StakerMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// amount the staker has delegated to himself
	SelfDelegation uint64 `protobuf:"varint,3,opt,name=self_delegation,json=selfDelegation,proto3" json:"self_delegation,omitempty"`
	// unbonding_amount is the amount the staker is currently unbonding
	// from the self-delegation.
	// This amount can be larger than `amount` when the staker
	// got slashed during unbonding. However, at the end of
	// the unbonding period this amount is double checked with the
	// remaining amount.
	SelfDelegationUnbonding uint64 `protobuf:"varint,4,opt,name=self_delegation_unbonding,json=selfDelegationUnbonding,proto3" json:"self_delegation_unbonding,omitempty"`
	// total_delegation returns the sum of all $KYVE users
	// have delegated to this staker
	TotalDelegation uint64 `protobuf:"varint,5,opt,name=total_delegation,json=totalDelegation,proto3" json:"total_delegation,omitempty"`
	// delegator_count is the total number of individual
	// delegator addresses for that user.
	DelegatorCount uint64 `protobuf:"varint,6,opt,name=delegator_count,json=delegatorCount,proto3" json:"delegator_count,omitempty"`
	// pools is a list of all pools the staker is currently
	// participating, i.e. allowed to vote and upload data.
	Pools []*PoolMembership `protobuf:"bytes,7,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (m *FullStaker) Reset()         { *m = FullStaker{} }
func (m *FullStaker) String() string { return proto.CompactTextString(m) }
func (*FullStaker) ProtoMessage()    {}
func (*FullStaker) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b41255feae93a15, []int{1}
}
func (m *FullStaker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FullStaker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FullStaker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FullStaker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullStaker.Merge(m, src)
}
func (m *FullStaker) XXX_Size() int {
	return m.Size()
}
func (m *FullStaker) XXX_DiscardUnknown() {
	xxx_messageInfo_FullStaker.DiscardUnknown(m)
}

var xxx_messageInfo_FullStaker proto.InternalMessageInfo

func (m *FullStaker) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *FullStaker) GetMetadata() *StakerMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *FullStaker) GetSelfDelegation() uint64 {
	if m != nil {
		return m.SelfDelegation
	}
	return 0
}

func (m *FullStaker) GetSelfDelegationUnbonding() uint64 {
	if m != nil {
		return m.SelfDelegationUnbonding
	}
	return 0
}

func (m *FullStaker) GetTotalDelegation() uint64 {
	if m != nil {
		return m.TotalDelegation
	}
	return 0
}

func (m *FullStaker) GetDelegatorCount() uint64 {
	if m != nil {
		return m.DelegatorCount
	}
	return 0
}

func (m *FullStaker) GetPools() []*PoolMembership {
	if m != nil {
		return m.Pools
	}
	return nil
}

// StakerMetadata contains static information for a staker
type StakerMetadata struct {
	// commission is the percentage of the rewards that will
	// get transferred to the staker before the remaining
	// rewards are split across all delegators
	Commission github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=commission,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission"`
	// moniker is a human-readable name for displaying
	// the staker in the UI
	Moniker string `protobuf:"bytes,2,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// website is a https-link to the website of the staker
	Website string `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	// identity from keybase.io
	Identity string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	// security_contact ...
	SecurityContact string `protobuf:"bytes,5,opt,name=security_contact,json=securityContact,proto3" json:"security_contact,omitempty"`
	// details ...
	Details string `protobuf:"bytes,6,opt,name=details,proto3" json:"details,omitempty"`
	// pending_commission_change shows if the staker plans
	// to change its commission. Delegators will see a warning in
	// the UI. A Commission change takes some time until
	// the commission is applied. Users have time to redelegate
	// if they not agree with the new commission.
	PendingCommissionChange *CommissionChangeEntry `protobuf:"bytes,7,opt,name=pending_commission_change,json=pendingCommissionChange,proto3" json:"pending_commission_change,omitempty"`
	// commission_rewards are the rewards in $KYVE earned through commission
	CommissionRewards uint64 `protobuf:"varint,8,opt,name=commission_rewards,json=commissionRewards,proto3" json:"commission_rewards,omitempty"`
}

func (m *StakerMetadata) Reset()         { *m = StakerMetadata{} }
func (m *StakerMetadata) String() string { return proto.CompactTextString(m) }
func (*StakerMetadata) ProtoMessage()    {}
func (*StakerMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b41255feae93a15, []int{2}
}
func (m *StakerMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerMetadata.Merge(m, src)
}
func (m *StakerMetadata) XXX_Size() int {
	return m.Size()
}
func (m *StakerMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StakerMetadata proto.InternalMessageInfo

func (m *StakerMetadata) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *StakerMetadata) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *StakerMetadata) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *StakerMetadata) GetSecurityContact() string {
	if m != nil {
		return m.SecurityContact
	}
	return ""
}

func (m *StakerMetadata) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *StakerMetadata) GetPendingCommissionChange() *CommissionChangeEntry {
	if m != nil {
		return m.PendingCommissionChange
	}
	return nil
}

func (m *StakerMetadata) GetCommissionRewards() uint64 {
	if m != nil {
		return m.CommissionRewards
	}
	return 0
}

// CommissionChangeEntry shows when the old commission
// of a staker will change to the new commission
type CommissionChangeEntry struct {
	// commission is the new commission that will
	// become active once the change-time is over
	Commission github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=commission,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission"`
	// creation_date is the UNIX-timestamp (in seconds)
	// of when the entry was created.
	CreationDate int64 `protobuf:"varint,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (m *CommissionChangeEntry) Reset()         { *m = CommissionChangeEntry{} }
func (m *CommissionChangeEntry) String() string { return proto.CompactTextString(m) }
func (*CommissionChangeEntry) ProtoMessage()    {}
func (*CommissionChangeEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b41255feae93a15, []int{3}
}
func (m *CommissionChangeEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommissionChangeEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommissionChangeEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommissionChangeEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommissionChangeEntry.Merge(m, src)
}
func (m *CommissionChangeEntry) XXX_Size() int {
	return m.Size()
}
func (m *CommissionChangeEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CommissionChangeEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CommissionChangeEntry proto.InternalMessageInfo

func (m *CommissionChangeEntry) GetCreationDate() int64 {
	if m != nil {
		return m.CreationDate
	}
	return 0
}

// PoolMembership shows in which pool the staker
// is participating
type PoolMembership struct {
	// pool contains useful information about the pool
	Pool *BasicPool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	// points indicates if the staker is inactive
	// If the staker misses a vote, a point is added.
	// After 5 points the staker is removed from
	// the stakers set.
	Points uint64 `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
	// is_leaving indicates if a user has scheduled a
	// a PoolLeave entry. After the leave-time is over
	// the staker will no longer participate in that pool
	IsLeaving bool `protobuf:"varint,3,opt,name=is_leaving,json=isLeaving,proto3" json:"is_leaving,omitempty"`
	// Valaddress is the address which is authorized to vote
	// and submit bundles. If the server gets compromised
	// the staker can just change the valaddress.
	Valaddress string `protobuf:"bytes,4,opt,name=valaddress,proto3" json:"valaddress,omitempty"`
	// balance is the valaddress account balance and indicates
	// whether or not the valaccount needs additional funds to
	// pay for gas fees
	Balance uint64 `protobuf:"varint,5,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (m *PoolMembership) Reset()         { *m = PoolMembership{} }
func (m *PoolMembership) String() string { return proto.CompactTextString(m) }
func (*PoolMembership) ProtoMessage()    {}
func (*PoolMembership) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b41255feae93a15, []int{4}
}
func (m *PoolMembership) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolMembership) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolMembership.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolMembership) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolMembership.Merge(m, src)
}
func (m *PoolMembership) XXX_Size() int {
	return m.Size()
}
func (m *PoolMembership) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolMembership.DiscardUnknown(m)
}

var xxx_messageInfo_PoolMembership proto.InternalMessageInfo

func (m *PoolMembership) GetPool() *BasicPool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (m *PoolMembership) GetPoints() uint64 {
	if m != nil {
		return m.Points
	}
	return 0
}

func (m *PoolMembership) GetIsLeaving() bool {
	if m != nil {
		return m.IsLeaving
	}
	return false
}

func (m *PoolMembership) GetValaddress() string {
	if m != nil {
		return m.Valaddress
	}
	return ""
}

func (m *PoolMembership) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func init() {
	proto.RegisterType((*BasicPool)(nil), "kyve.query.v1beta1.BasicPool")
	proto.RegisterType((*FullStaker)(nil), "kyve.query.v1beta1.FullStaker")
	proto.RegisterType((*StakerMetadata)(nil), "kyve.query.v1beta1.StakerMetadata")
	proto.RegisterType((*CommissionChangeEntry)(nil), "kyve.query.v1beta1.CommissionChangeEntry")
	proto.RegisterType((*PoolMembership)(nil), "kyve.query.v1beta1.PoolMembership")
}

func init() { proto.RegisterFile("kyve/query/v1beta1/query.proto", fileDescriptor_6b41255feae93a15) }

var fileDescriptor_6b41255feae93a15 = []byte{
	// 782 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x41, 0x8f, 0xe3, 0x34,
	0x14, 0xc7, 0x9b, 0xb6, 0xd3, 0x6d, 0x5f, 0xd9, 0x16, 0x2c, 0x60, 0xb3, 0x23, 0x36, 0x33, 0x2a,
	0x82, 0x9d, 0x45, 0xda, 0x54, 0x33, 0x08, 0x09, 0x71, 0xe0, 0x30, 0xed, 0xae, 0x84, 0x60, 0x57,
	0xc8, 0x08, 0x24, 0xb8, 0x44, 0x6e, 0xe2, 0x4d, 0xad, 0x26, 0x76, 0xb0, 0x9d, 0x0e, 0xfd, 0x0c,
	0x70, 0xe0, 0xa3, 0x70, 0xe0, 0x43, 0xec, 0x71, 0x8e, 0xc0, 0x61, 0x84, 0x66, 0xbe, 0x08, 0xb2,
	0x9d, 0x64, 0xda, 0xa1, 0xdc, 0x38, 0x25, 0xef, 0xff, 0xfe, 0x79, 0xb1, 0x7f, 0xef, 0xd9, 0x10,
	0xac, 0x36, 0x6b, 0x3a, 0xfd, 0xb1, 0xa4, 0x72, 0x33, 0x5d, 0x9f, 0x2e, 0xa8, 0x26, 0xa7, 0x2e,
	0x0a, 0x0b, 0x29, 0xb4, 0x40, 0xc8, 0xe4, 0x43, 0xa7, 0x54, 0xf9, 0xc3, 0xb7, 0x53, 0x91, 0x0a,
	0x9b, 0x9e, 0x9a, 0x37, 0xe7, 0x3c, 0x7c, 0xcf, 0x56, 0x2a, 0x84, 0xc8, 0x9a, 0x42, 0x26, 0x70,
	0xd9, 0xc9, 0x6f, 0x6d, 0x18, 0x9c, 0x13, 0xc5, 0xe2, 0xaf, 0x85, 0xc8, 0xd0, 0x08, 0xda, 0x2c,
	0xf1, 0xbd, 0x63, 0xef, 0xa4, 0x8b, 0xdb, 0x2c, 0x41, 0x08, 0xba, 0x9c, 0xe4, 0xd4, 0x6f, 0x1f,
	0x7b, 0x27, 0x03, 0x6c, 0xdf, 0x91, 0x0f, 0xf7, 0x64, 0xc9, 0x35, 0xcb, 0xa9, 0xdf, 0xb1, 0x72,
	0x1d, 0x1a, 0x77, 0x26, 0x52, 0xe1, 0x77, 0x9d, 0xdb, 0xbc, 0xa3, 0x0f, 0x60, 0x24, 0x0a, 0x2a,
	0x89, 0x66, 0x3c, 0x8d, 0x62, 0xa1, 0xb4, 0x7f, 0x60, 0xab, 0xdf, 0x6f, 0xd4, 0x99, 0x50, 0x1a,
	0x3d, 0x86, 0x71, 0x59, 0x64, 0x82, 0x24, 0x11, 0xe3, 0x9a, 0xca, 0x35, 0xc9, 0xfc, 0x9e, 0xf5,
	0x8d, 0x9c, 0xfc, 0x45, 0xa5, 0xa2, 0x23, 0x18, 0x6a, 0xa1, 0x49, 0x16, 0xbd, 0x2a, 0x79, 0xa2,
	0xfc, 0x7b, 0xd6, 0x04, 0x56, 0x7a, 0x6e, 0x14, 0xf4, 0x04, 0xde, 0x74, 0x86, 0x84, 0x66, 0x34,
	0x25, 0x9a, 0x09, 0xee, 0xf7, 0xad, 0x6b, 0x6c, 0xf5, 0x79, 0x23, 0xa3, 0x4f, 0xa0, 0xa7, 0x34,
	0xd1, 0xa5, 0xf2, 0x07, 0xc7, 0xde, 0xc9, 0xe8, 0xec, 0x51, 0x68, 0xa1, 0x5a, 0x3a, 0x15, 0xaa,
	0xd0, 0x60, 0xf9, 0xc6, 0x9a, 0x70, 0x65, 0x9e, 0xfc, 0xd9, 0x06, 0x78, 0x5e, 0x66, 0x46, 0x5e,
	0x51, 0x69, 0x78, 0x90, 0x24, 0x91, 0x54, 0x29, 0x0b, 0x6e, 0x80, 0xeb, 0x10, 0x7d, 0x0e, 0xfd,
	0x9c, 0x6a, 0x92, 0x10, 0x4d, 0x2c, 0xc1, 0xe1, 0xd9, 0x24, 0xfc, 0x77, 0xdb, 0x42, 0x57, 0xe7,
	0x45, 0xe5, 0xc4, 0xcd, 0x37, 0x06, 0x8a, 0xa2, 0xd9, 0xab, 0xed, 0x9d, 0x74, 0x1c, 0x14, 0x23,
	0x6f, 0x6d, 0xe4, 0x33, 0x78, 0x78, 0xc7, 0x18, 0x95, 0x7c, 0x21, 0x78, 0xc2, 0x78, 0x6a, 0xbb,
	0xd1, 0xc5, 0x0f, 0x76, 0x3f, 0xf9, 0xb6, 0x4e, 0xef, 0xe5, 0x75, 0xb0, 0x9f, 0xd7, 0x63, 0x18,
	0x57, 0x26, 0x21, 0xa3, 0x58, 0x94, 0x5c, 0xd7, 0x4d, 0x6a, 0xe4, 0x99, 0x51, 0xd1, 0xa7, 0x70,
	0x60, 0x20, 0x9a, 0xf6, 0x74, 0xfe, 0x6b, 0xd7, 0x06, 0xec, 0x0b, 0x9a, 0x2f, 0xa8, 0x54, 0x4b,
	0x56, 0x60, 0xf7, 0xc1, 0xe4, 0xe7, 0x0e, 0x8c, 0x76, 0x79, 0xa0, 0x97, 0x00, 0xb1, 0xc8, 0x73,
	0xa6, 0x94, 0x59, 0x9a, 0x45, 0x7c, 0x1e, 0xbe, 0xbe, 0x3a, 0x6a, 0xfd, 0x75, 0x75, 0xf4, 0x61,
	0xca, 0xf4, 0xb2, 0x5c, 0x84, 0xb1, 0xc8, 0xa7, 0xb1, 0x50, 0xb9, 0x50, 0xd5, 0xe3, 0xa9, 0x4a,
	0x56, 0x53, 0xbd, 0x29, 0xa8, 0x0a, 0xe7, 0x34, 0xc6, 0x5b, 0x15, 0x4c, 0xbf, 0x72, 0xc1, 0xd9,
	0x8a, 0xca, 0x6a, 0xac, 0xeb, 0xd0, 0x64, 0x2e, 0xe8, 0x42, 0x31, 0xdd, 0x4c, 0x76, 0x15, 0xa2,
	0x43, 0xe8, 0xb3, 0x84, 0x72, 0xcd, 0xf4, 0xa6, 0x9a, 0xee, 0x26, 0x36, 0x00, 0x15, 0x8d, 0x4b,
	0xc9, 0xf4, 0x26, 0x8a, 0x05, 0xd7, 0x24, 0x76, 0x33, 0x3e, 0xc0, 0xe3, 0x5a, 0x9f, 0x39, 0xd9,
	0xfc, 0x20, 0xa1, 0x9a, 0xb0, 0x4c, 0x59, 0x70, 0x03, 0x5c, 0x87, 0x88, 0xc2, 0xc3, 0x82, 0xda,
	0x86, 0x44, 0xb7, 0x4b, 0x8d, 0xe2, 0x25, 0xe1, 0x29, 0xb5, 0x43, 0x3e, 0x3c, 0x7b, 0xb2, 0x8f,
	0xe2, 0xac, 0x31, 0xcf, 0xac, 0xf7, 0x19, 0xd7, 0x72, 0x83, 0x1f, 0x54, 0xb5, 0xee, 0x66, 0xd1,
	0x53, 0x40, 0x5b, 0xe5, 0x25, 0xbd, 0x20, 0x32, 0x51, 0xd5, 0xf1, 0x78, 0xeb, 0x36, 0x83, 0x5d,
	0x62, 0xf2, 0x8b, 0x07, 0xef, 0xec, 0xfd, 0xc3, 0xff, 0xde, 0x94, 0xf7, 0xe1, 0x7e, 0x2c, 0xa9,
	0x1b, 0xdd, 0x84, 0x68, 0x77, 0xe3, 0x74, 0xf0, 0x1b, 0xb5, 0x38, 0x27, 0x9a, 0x4e, 0x7e, 0xf7,
	0x60, 0xb4, 0x3b, 0x36, 0xe8, 0x14, 0xba, 0x66, 0x70, 0xec, 0x0a, 0x86, 0xf5, 0x01, 0xde, 0x45,
	0xd4, 0xdc, 0x6e, 0xd8, 0x5a, 0xd1, 0xbb, 0xd0, 0x2b, 0x04, 0xe3, 0x5a, 0xd9, 0x7f, 0x74, 0x71,
	0x15, 0xa1, 0x47, 0x00, 0x4c, 0x45, 0x19, 0x25, 0x6b, 0x73, 0x6a, 0xcc, 0x00, 0xf4, 0xf1, 0x80,
	0xa9, 0xaf, 0x9c, 0x80, 0x02, 0x80, 0x35, 0xc9, 0xea, 0x93, 0xee, 0x86, 0x60, 0x4b, 0x31, 0xbd,
	0x5d, 0x90, 0x8c, 0xf0, 0x98, 0x56, 0xc7, 0xa7, 0x0e, 0xcf, 0xe7, 0xaf, 0xaf, 0x03, 0xef, 0xf2,
	0x3a, 0xf0, 0xfe, 0xbe, 0x0e, 0xbc, 0x5f, 0x6f, 0x82, 0xd6, 0xe5, 0x4d, 0xd0, 0xfa, 0xe3, 0x26,
	0x68, 0xfd, 0xf0, 0xd1, 0x16, 0xa9, 0x2f, 0xbf, 0xff, 0xee, 0xd9, 0x4b, 0xaa, 0x2f, 0x84, 0x5c,
	0x4d, 0xe3, 0x25, 0x61, 0x7c, 0xfa, 0x53, 0x75, 0xfd, 0x5b, 0x62, 0x8b, 0x9e, 0xbd, 0xaf, 0x3f,
	0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0x50, 0x8f, 0x9d, 0x37, 0x19, 0x06, 0x00, 0x00,
}

func (m *BasicPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasicPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.TotalDelegation != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalDelegation))
		i--
		dAtA[i] = 0x40
	}
	if m.TotalFunds != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalFunds))
		i--
		dAtA[i] = 0x38
	}
	if m.UploadInterval != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UploadInterval))
		i--
		dAtA[i] = 0x30
	}
	if m.OperatingCost != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OperatingCost))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Runtime) > 0 {
		i -= len(m.Runtime)
		copy(dAtA[i:], m.Runtime)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Runtime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FullStaker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullStaker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullStaker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.DelegatorCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DelegatorCount))
		i--
		dAtA[i] = 0x30
	}
	if m.TotalDelegation != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalDelegation))
		i--
		dAtA[i] = 0x28
	}
	if m.SelfDelegationUnbonding != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SelfDelegationUnbonding))
		i--
		dAtA[i] = 0x20
	}
	if m.SelfDelegation != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SelfDelegation))
		i--
		dAtA[i] = 0x18
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakerMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommissionRewards != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CommissionRewards))
		i--
		dAtA[i] = 0x40
	}
	if m.PendingCommissionChange != nil {
		{
			size, err := m.PendingCommissionChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SecurityContact) > 0 {
		i -= len(m.SecurityContact)
		copy(dAtA[i:], m.SecurityContact)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SecurityContact)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Commission.Size()
		i -= size
		if _, err := m.Commission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CommissionChangeEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommissionChangeEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommissionChangeEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreationDate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CreationDate))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Commission.Size()
		i -= size
		if _, err := m.Commission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PoolMembership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolMembership) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolMembership) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Balance != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Balance))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Valaddress) > 0 {
		i -= len(m.Valaddress)
		copy(dAtA[i:], m.Valaddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Valaddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsLeaving {
		i--
		if m.IsLeaving {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Points != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Points))
		i--
		dAtA[i] = 0x10
	}
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BasicPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Runtime)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OperatingCost != 0 {
		n += 1 + sovQuery(uint64(m.OperatingCost))
	}
	if m.UploadInterval != 0 {
		n += 1 + sovQuery(uint64(m.UploadInterval))
	}
	if m.TotalFunds != 0 {
		n += 1 + sovQuery(uint64(m.TotalFunds))
	}
	if m.TotalDelegation != 0 {
		n += 1 + sovQuery(uint64(m.TotalDelegation))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *FullStaker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SelfDelegation != 0 {
		n += 1 + sovQuery(uint64(m.SelfDelegation))
	}
	if m.SelfDelegationUnbonding != 0 {
		n += 1 + sovQuery(uint64(m.SelfDelegationUnbonding))
	}
	if m.TotalDelegation != 0 {
		n += 1 + sovQuery(uint64(m.TotalDelegation))
	}
	if m.DelegatorCount != 0 {
		n += 1 + sovQuery(uint64(m.DelegatorCount))
	}
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *StakerMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Commission.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SecurityContact)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PendingCommissionChange != nil {
		l = m.PendingCommissionChange.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CommissionRewards != 0 {
		n += 1 + sovQuery(uint64(m.CommissionRewards))
	}
	return n
}

func (m *CommissionChangeEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Commission.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.CreationDate != 0 {
		n += 1 + sovQuery(uint64(m.CreationDate))
	}
	return n
}

func (m *PoolMembership) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Points != 0 {
		n += 1 + sovQuery(uint64(m.Points))
	}
	if m.IsLeaving {
		n += 2
	}
	l = len(m.Valaddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Balance != 0 {
		n += 1 + sovQuery(uint64(m.Balance))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BasicPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingCost", wireType)
			}
			m.OperatingCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatingCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadInterval", wireType)
			}
			m.UploadInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFunds", wireType)
			}
			m.TotalFunds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFunds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegation", wireType)
			}
			m.TotalDelegation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDelegation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types.PoolStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FullStaker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullStaker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullStaker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &StakerMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfDelegation", wireType)
			}
			m.SelfDelegation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfDelegation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfDelegationUnbonding", wireType)
			}
			m.SelfDelegationUnbonding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfDelegationUnbonding |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegation", wireType)
			}
			m.TotalDelegation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDelegation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorCount", wireType)
			}
			m.DelegatorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegatorCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &PoolMembership{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingCommissionChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingCommissionChange == nil {
				m.PendingCommissionChange = &CommissionChangeEntry{}
			}
			if err := m.PendingCommissionChange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRewards", wireType)
			}
			m.CommissionRewards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommissionRewards |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommissionChangeEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommissionChangeEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommissionChangeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			m.CreationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolMembership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolMembership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolMembership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &BasicPool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			m.Points = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Points |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLeaving", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLeaving = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valaddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Valaddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
