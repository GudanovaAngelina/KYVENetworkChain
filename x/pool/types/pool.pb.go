// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/pool/v1beta1/pool.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PoolStatus ...
type PoolStatus int32

const (
	// POOL_STATUS_UNSPECIFIED indicates an unknown status, likely
	// due to an error
	POOL_STATUS_UNSPECIFIED PoolStatus = 0
	// POOL_STATUS_ACTIVE indicates, that the pool is running
	// normally
	POOL_STATUS_ACTIVE PoolStatus = 1
	// POOL_STATUS_DISABLED indicates, that the pool was disabled
	// by the governance and does not continue until it is enabled
	// by the governance again
	POOL_STATUS_DISABLED PoolStatus = 2
	// POOL_STATUS_NO_FUNDS indicates, that the pool currently has no
	// funds, but is continuing normally anyway, due to inflation splitting
	POOL_STATUS_NO_FUNDS PoolStatus = 3
	// POOL_STATUS_NOT_ENOUGH_DELEGATION indicates, that the min delegation
	// requirement has not been met and that the pool is halted
	POOL_STATUS_NOT_ENOUGH_DELEGATION PoolStatus = 4
	// POOL_STATUS_UPGRADING indicates, that the runtime is currently
	// being upgraded and that the pool is halted
	POOL_STATUS_UPGRADING PoolStatus = 5
	// POOL_STATUS_VOTING_POWER_TOO_HIGH indicates, that one validator
	// has more than 50% voting power and that the pool is halted
	POOL_STATUS_VOTING_POWER_TOO_HIGH PoolStatus = 6
)

var PoolStatus_name = map[int32]string{
	0: "POOL_STATUS_UNSPECIFIED",
	1: "POOL_STATUS_ACTIVE",
	2: "POOL_STATUS_DISABLED",
	3: "POOL_STATUS_NO_FUNDS",
	4: "POOL_STATUS_NOT_ENOUGH_DELEGATION",
	5: "POOL_STATUS_UPGRADING",
	6: "POOL_STATUS_VOTING_POWER_TOO_HIGH",
}

var PoolStatus_value = map[string]int32{
	"POOL_STATUS_UNSPECIFIED":           0,
	"POOL_STATUS_ACTIVE":                1,
	"POOL_STATUS_DISABLED":              2,
	"POOL_STATUS_NO_FUNDS":              3,
	"POOL_STATUS_NOT_ENOUGH_DELEGATION": 4,
	"POOL_STATUS_UPGRADING":             5,
	"POOL_STATUS_VOTING_POWER_TOO_HIGH": 6,
}

func (x PoolStatus) String() string {
	return proto.EnumName(PoolStatus_name, int32(x))
}

func (PoolStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_40c1730f47ff2ef8, []int{0}
}

// Protocol holds all info about the current pool version and the
// available binaries for participating as a validator in a pool
type Protocol struct {
	// version holds the current software version tag of the pool binaries
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// binaries is a stringified json object which holds binaries in the
	// current version for multiple platforms and architectures
	Binaries string `protobuf:"bytes,2,opt,name=binaries,proto3" json:"binaries,omitempty"`
	// last_upgrade is the unix time the pool was upgraded the last time
	LastUpgrade uint64 `protobuf:"varint,3,opt,name=last_upgrade,json=lastUpgrade,proto3" json:"last_upgrade,omitempty"`
}

func (m *Protocol) Reset()         { *m = Protocol{} }
func (m *Protocol) String() string { return proto.CompactTextString(m) }
func (*Protocol) ProtoMessage()    {}
func (*Protocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_40c1730f47ff2ef8, []int{0}
}
func (m *Protocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Protocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Protocol.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Protocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Protocol.Merge(m, src)
}
func (m *Protocol) XXX_Size() int {
	return m.Size()
}
func (m *Protocol) XXX_DiscardUnknown() {
	xxx_messageInfo_Protocol.DiscardUnknown(m)
}

var xxx_messageInfo_Protocol proto.InternalMessageInfo

func (m *Protocol) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Protocol) GetBinaries() string {
	if m != nil {
		return m.Binaries
	}
	return ""
}

func (m *Protocol) GetLastUpgrade() uint64 {
	if m != nil {
		return m.LastUpgrade
	}
	return 0
}

// Upgrade holds all info when a pool has a scheduled upgrade
type UpgradePlan struct {
	// version is the new software version tag of the upgrade
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// binaries is the new stringified json object which holds binaries in the
	// upgrade version for multiple platforms and architectures
	Binaries string `protobuf:"bytes,2,opt,name=binaries,proto3" json:"binaries,omitempty"`
	// scheduled_at is the unix time the upgrade is supposed to be done
	ScheduledAt uint64 `protobuf:"varint,3,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"`
	// duration is the time in seconds how long the pool should halt
	// during the upgrade to give all validators a chance of switching
	// to the new binaries
	Duration uint64 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *UpgradePlan) Reset()         { *m = UpgradePlan{} }
func (m *UpgradePlan) String() string { return proto.CompactTextString(m) }
func (*UpgradePlan) ProtoMessage()    {}
func (*UpgradePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_40c1730f47ff2ef8, []int{1}
}
func (m *UpgradePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradePlan.Merge(m, src)
}
func (m *UpgradePlan) XXX_Size() int {
	return m.Size()
}
func (m *UpgradePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradePlan.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradePlan proto.InternalMessageInfo

func (m *UpgradePlan) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *UpgradePlan) GetBinaries() string {
	if m != nil {
		return m.Binaries
	}
	return ""
}

func (m *UpgradePlan) GetScheduledAt() uint64 {
	if m != nil {
		return m.ScheduledAt
	}
	return 0
}

func (m *UpgradePlan) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// Funder is the object which holds info about a single pool funder
type Funder struct {
	// address is the address of the funder
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// amount is the current amount of funds in ukyve the funder has
	// still funded the pool with
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *Funder) Reset()         { *m = Funder{} }
func (m *Funder) String() string { return proto.CompactTextString(m) }
func (*Funder) ProtoMessage()    {}
func (*Funder) Descriptor() ([]byte, []int) {
	return fileDescriptor_40c1730f47ff2ef8, []int{2}
}
func (m *Funder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Funder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Funder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Funder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Funder.Merge(m, src)
}
func (m *Funder) XXX_Size() int {
	return m.Size()
}
func (m *Funder) XXX_DiscardUnknown() {
	xxx_messageInfo_Funder.DiscardUnknown(m)
}

var xxx_messageInfo_Funder proto.InternalMessageInfo

func (m *Funder) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Funder) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// Pool ...
type Pool struct {
	// id - unique identifier of the pool, can not be changed
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name is a human readable name for the pool
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// runtime specified which protocol and which version needs is required
	Runtime string `protobuf:"bytes,3,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// logo is a link to an image file
	Logo string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	// config is either a JSON encoded string or a link to an external storage provider.
	// This is up to the implementation of the protocol node.
	Config string `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// start_key ...
	StartKey string `protobuf:"bytes,6,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	// current_key ...
	CurrentKey string `protobuf:"bytes,7,opt,name=current_key,json=currentKey,proto3" json:"current_key,omitempty"`
	// current_summary ...
	CurrentSummary string `protobuf:"bytes,8,opt,name=current_summary,json=currentSummary,proto3" json:"current_summary,omitempty"`
	// current_index ...
	CurrentIndex uint64 `protobuf:"varint,9,opt,name=current_index,json=currentIndex,proto3" json:"current_index,omitempty"`
	// total_bundles is the number of total finalized bundles
	TotalBundles uint64 `protobuf:"varint,10,opt,name=total_bundles,json=totalBundles,proto3" json:"total_bundles,omitempty"`
	// upload_interval ...
	UploadInterval uint64 `protobuf:"varint,11,opt,name=upload_interval,json=uploadInterval,proto3" json:"upload_interval,omitempty"`
	// operating_cost ...
	OperatingCost uint64 `protobuf:"varint,12,opt,name=operating_cost,json=operatingCost,proto3" json:"operating_cost,omitempty"`
	// min_delegation ...
	MinDelegation uint64 `protobuf:"varint,13,opt,name=min_delegation,json=minDelegation,proto3" json:"min_delegation,omitempty"`
	// max_bundle_size ...
	MaxBundleSize uint64 `protobuf:"varint,14,opt,name=max_bundle_size,json=maxBundleSize,proto3" json:"max_bundle_size,omitempty"`
	// disabled is true when the pool is disabled.
	// Can only be done via governance.
	Disabled bool `protobuf:"varint,15,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// funders ...
	Funders []*Funder `protobuf:"bytes,16,rep,name=funders,proto3" json:"funders,omitempty"`
	// total_funds ...
	TotalFunds uint64 `protobuf:"varint,17,opt,name=total_funds,json=totalFunds,proto3" json:"total_funds,omitempty"`
	// protocol ...
	Protocol *Protocol `protobuf:"bytes,18,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// upgrade_plan ...
	UpgradePlan *UpgradePlan `protobuf:"bytes,19,opt,name=upgrade_plan,json=upgradePlan,proto3" json:"upgrade_plan,omitempty"`
	// storage_provider_id ...
	CurrentStorageProviderId uint32 `protobuf:"varint,20,opt,name=current_storage_provider_id,json=currentStorageProviderId,proto3" json:"current_storage_provider_id,omitempty"`
	// compression_id ...
	CurrentCompressionId uint32 `protobuf:"varint,21,opt,name=current_compression_id,json=currentCompressionId,proto3" json:"current_compression_id,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_40c1730f47ff2ef8, []int{3}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Pool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pool) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *Pool) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Pool) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *Pool) GetStartKey() string {
	if m != nil {
		return m.StartKey
	}
	return ""
}

func (m *Pool) GetCurrentKey() string {
	if m != nil {
		return m.CurrentKey
	}
	return ""
}

func (m *Pool) GetCurrentSummary() string {
	if m != nil {
		return m.CurrentSummary
	}
	return ""
}

func (m *Pool) GetCurrentIndex() uint64 {
	if m != nil {
		return m.CurrentIndex
	}
	return 0
}

func (m *Pool) GetTotalBundles() uint64 {
	if m != nil {
		return m.TotalBundles
	}
	return 0
}

func (m *Pool) GetUploadInterval() uint64 {
	if m != nil {
		return m.UploadInterval
	}
	return 0
}

func (m *Pool) GetOperatingCost() uint64 {
	if m != nil {
		return m.OperatingCost
	}
	return 0
}

func (m *Pool) GetMinDelegation() uint64 {
	if m != nil {
		return m.MinDelegation
	}
	return 0
}

func (m *Pool) GetMaxBundleSize() uint64 {
	if m != nil {
		return m.MaxBundleSize
	}
	return 0
}

func (m *Pool) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *Pool) GetFunders() []*Funder {
	if m != nil {
		return m.Funders
	}
	return nil
}

func (m *Pool) GetTotalFunds() uint64 {
	if m != nil {
		return m.TotalFunds
	}
	return 0
}

func (m *Pool) GetProtocol() *Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *Pool) GetUpgradePlan() *UpgradePlan {
	if m != nil {
		return m.UpgradePlan
	}
	return nil
}

func (m *Pool) GetCurrentStorageProviderId() uint32 {
	if m != nil {
		return m.CurrentStorageProviderId
	}
	return 0
}

func (m *Pool) GetCurrentCompressionId() uint32 {
	if m != nil {
		return m.CurrentCompressionId
	}
	return 0
}

func init() {
	proto.RegisterEnum("kyve.pool.v1beta1.PoolStatus", PoolStatus_name, PoolStatus_value)
	proto.RegisterType((*Protocol)(nil), "kyve.pool.v1beta1.Protocol")
	proto.RegisterType((*UpgradePlan)(nil), "kyve.pool.v1beta1.UpgradePlan")
	proto.RegisterType((*Funder)(nil), "kyve.pool.v1beta1.Funder")
	proto.RegisterType((*Pool)(nil), "kyve.pool.v1beta1.Pool")
}

func init() { proto.RegisterFile("kyve/pool/v1beta1/pool.proto", fileDescriptor_40c1730f47ff2ef8) }

var fileDescriptor_40c1730f47ff2ef8 = []byte{
	// 840 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x41, 0x6f, 0x22, 0x37,
	0x14, 0xc7, 0x99, 0x84, 0x25, 0x60, 0x12, 0xc2, 0xba, 0xd9, 0xd4, 0x9b, 0x54, 0x94, 0x4d, 0xb5,
	0x2d, 0xed, 0x01, 0xb4, 0xbb, 0x95, 0x2a, 0x55, 0xea, 0x81, 0x00, 0x21, 0xa3, 0x8d, 0x00, 0x0d,
	0x90, 0xaa, 0xbd, 0x58, 0x06, 0x7b, 0x27, 0x56, 0x66, 0xec, 0xd1, 0xd8, 0x43, 0xc3, 0x1e, 0x7b,
	0xea, 0xb1, 0xdf, 0x61, 0xbf, 0x4c, 0x8f, 0x7b, 0xec, 0xb1, 0x4a, 0xfa, 0x41, 0x2a, 0x7b, 0x66,
	0x68, 0x76, 0x9b, 0x53, 0x6f, 0x7e, 0xbf, 0xff, 0xff, 0xf9, 0x3d, 0xe6, 0xf9, 0x01, 0x3e, 0xbb,
	0x5e, 0xaf, 0x58, 0x27, 0x92, 0x32, 0xe8, 0xac, 0x5e, 0x2c, 0x98, 0x26, 0x2f, 0x6c, 0xd0, 0x8e,
	0x62, 0xa9, 0x25, 0x7c, 0x6c, 0xd4, 0xb6, 0x05, 0x99, 0x7a, 0x74, 0xe0, 0x4b, 0x5f, 0x5a, 0xb5,
	0x63, 0x4e, 0xa9, 0xf1, 0x64, 0x09, 0xca, 0x13, 0x73, 0x58, 0xca, 0x00, 0x22, 0xb0, 0xb3, 0x62,
	0xb1, 0xe2, 0x52, 0x20, 0xa7, 0xe9, 0xb4, 0x2a, 0x5e, 0x1e, 0xc2, 0x23, 0x50, 0x5e, 0x70, 0x41,
	0x62, 0xce, 0x14, 0xda, 0xb2, 0xd2, 0x26, 0x86, 0xcf, 0xc0, 0x6e, 0x40, 0x94, 0xc6, 0x49, 0xe4,
	0xc7, 0x84, 0x32, 0xb4, 0xdd, 0x74, 0x5a, 0x45, 0xaf, 0x6a, 0xd8, 0x3c, 0x45, 0x27, 0xbf, 0x3a,
	0xa0, 0x9a, 0x9d, 0x27, 0x01, 0x11, 0xff, 0xbf, 0x90, 0x5a, 0x5e, 0x31, 0x9a, 0x04, 0x8c, 0x62,
	0xa2, 0xf3, 0x42, 0x1b, 0xd6, 0xd5, 0x26, 0x9d, 0x26, 0x31, 0xd1, 0xe6, 0xe6, 0xa2, 0x95, 0x37,
	0xf1, 0xc9, 0xf7, 0xa0, 0x74, 0x96, 0x08, 0xca, 0x62, 0x53, 0x9e, 0x50, 0x1a, 0x33, 0xa5, 0xf2,
	0xf2, 0x59, 0x08, 0x0f, 0x41, 0x89, 0x84, 0x32, 0x11, 0xda, 0x16, 0x2f, 0x7a, 0x59, 0x74, 0xf2,
	0xae, 0x04, 0x8a, 0x13, 0x29, 0x03, 0x58, 0x03, 0x5b, 0x9c, 0xda, 0xac, 0xa2, 0xb7, 0xc5, 0x29,
	0x84, 0xa0, 0x28, 0x48, 0xc8, 0xb2, 0x5e, 0xed, 0xd9, 0x5c, 0x1f, 0x27, 0x42, 0xf3, 0x30, 0xfd,
	0x16, 0x15, 0x2f, 0x0f, 0x8d, 0x3b, 0x90, 0xbe, 0xb4, 0xad, 0x55, 0x3c, 0x7b, 0x36, 0x25, 0x97,
	0x52, 0xbc, 0xe1, 0x3e, 0x7a, 0x64, 0x69, 0x16, 0xc1, 0x63, 0x50, 0x51, 0x9a, 0xc4, 0x1a, 0x5f,
	0xb3, 0x35, 0x2a, 0xa5, 0x9f, 0xc2, 0x82, 0xd7, 0x6c, 0x0d, 0x3f, 0x07, 0xd5, 0x65, 0x12, 0xc7,
	0x4c, 0xa4, 0xf2, 0x8e, 0x95, 0x41, 0x86, 0x8c, 0xe1, 0x2b, 0xb0, 0x9f, 0x1b, 0x54, 0x12, 0x86,
	0x24, 0x5e, 0xa3, 0xb2, 0x35, 0xd5, 0x32, 0x3c, 0x4d, 0x29, 0xfc, 0x02, 0xec, 0xe5, 0x46, 0x2e,
	0x28, 0xbb, 0x41, 0x15, 0xfb, 0xdb, 0x76, 0x33, 0xe8, 0x1a, 0x66, 0x4c, 0x5a, 0x6a, 0x12, 0xe0,
	0x45, 0x22, 0x68, 0xc0, 0x14, 0x02, 0xa9, 0xc9, 0xc2, 0xd3, 0x94, 0x99, 0x92, 0x49, 0x14, 0x48,
	0x42, 0x31, 0x17, 0x9a, 0xc5, 0x2b, 0x12, 0xa0, 0xaa, 0xb5, 0xd5, 0x52, 0xec, 0x66, 0x14, 0x3e,
	0x07, 0x35, 0x19, 0x31, 0x33, 0x15, 0xe1, 0xe3, 0xa5, 0x54, 0x1a, 0xed, 0x5a, 0xdf, 0xde, 0x86,
	0xf6, 0xa4, 0xd2, 0xc6, 0x16, 0x72, 0x81, 0x29, 0x0b, 0x98, 0x9f, 0x4e, 0x74, 0x2f, 0xb5, 0x85,
	0x5c, 0xf4, 0x37, 0x10, 0x7e, 0x09, 0xf6, 0x43, 0x72, 0x93, 0x75, 0x86, 0x15, 0x7f, 0xcb, 0x50,
	0x2d, 0xf3, 0x91, 0x9b, 0xb4, 0xb7, 0x29, 0x7f, 0xcb, 0xec, 0xd3, 0xe0, 0x8a, 0x2c, 0x02, 0x46,
	0xd1, 0x7e, 0xd3, 0x69, 0x95, 0xbd, 0x4d, 0x0c, 0x5f, 0x81, 0x9d, 0x37, 0xf6, 0x69, 0x28, 0x54,
	0x6f, 0x6e, 0xb7, 0xaa, 0x2f, 0x9f, 0xb6, 0xff, 0xb3, 0x3f, 0xed, 0xf4, 0xf1, 0x78, 0xb9, 0xd3,
	0xcc, 0x20, 0xfd, 0x28, 0x06, 0x28, 0xf4, 0xd8, 0x16, 0x05, 0x16, 0x19, 0xab, 0x82, 0xdf, 0x81,
	0x72, 0x94, 0xad, 0x16, 0x82, 0x4d, 0xa7, 0x55, 0x7d, 0x79, 0xfc, 0xc0, 0xb5, 0xf9, 0xf6, 0x79,
	0x1b, 0x33, 0xec, 0x82, 0xdd, 0x6c, 0x99, 0x70, 0x14, 0x10, 0x81, 0x3e, 0xb1, 0xc9, 0x8d, 0x07,
	0x92, 0xef, 0x2d, 0x95, 0x57, 0x4d, 0xee, 0x6d, 0xd8, 0x0f, 0xe0, 0x78, 0x33, 0x7f, 0x2d, 0x63,
	0xe2, 0x33, 0x1c, 0xc5, 0x72, 0xc5, 0x29, 0x8b, 0x31, 0xa7, 0xe8, 0xa0, 0xe9, 0xb4, 0xf6, 0x3c,
	0x94, 0xbf, 0x85, 0xd4, 0x31, 0xc9, 0x0c, 0x2e, 0x85, 0xdf, 0x82, 0xc3, 0x3c, 0x7d, 0x29, 0xc3,
	0xc8, 0xec, 0x06, 0x97, 0xc2, 0x64, 0x3e, 0xb1, 0x99, 0x07, 0x99, 0xda, 0xfb, 0x57, 0x74, 0xe9,
	0x37, 0x7f, 0x3b, 0x00, 0x98, 0x2d, 0x99, 0x6a, 0xa2, 0x13, 0x05, 0x8f, 0xc1, 0xa7, 0x93, 0xf1,
	0xf8, 0x02, 0x4f, 0x67, 0xdd, 0xd9, 0x7c, 0x8a, 0xe7, 0xa3, 0xe9, 0x64, 0xd0, 0x73, 0xcf, 0xdc,
	0x41, 0xbf, 0x5e, 0x80, 0x87, 0x00, 0xde, 0x17, 0xbb, 0xbd, 0x99, 0x7b, 0x39, 0xa8, 0x3b, 0x10,
	0x81, 0x83, 0xfb, 0xbc, 0xef, 0x4e, 0xbb, 0xa7, 0x17, 0x83, 0x7e, 0x7d, 0xeb, 0x63, 0x65, 0x34,
	0xc6, 0x67, 0xf3, 0x51, 0x7f, 0x5a, 0xdf, 0x86, 0xcf, 0xc1, 0xb3, 0x0f, 0x95, 0x19, 0x1e, 0x8c,
	0xc6, 0xf3, 0xe1, 0x39, 0xee, 0x0f, 0x2e, 0x06, 0xc3, 0xee, 0xcc, 0x1d, 0x8f, 0xea, 0x45, 0xf8,
	0x14, 0x3c, 0xf9, 0xa0, 0x9f, 0xc9, 0xd0, 0xeb, 0xf6, 0xdd, 0xd1, 0xb0, 0xfe, 0xe8, 0xe3, 0x1b,
	0x2e, 0xc7, 0x33, 0x77, 0x34, 0xc4, 0x93, 0xf1, 0x8f, 0x03, 0x0f, 0xcf, 0xc6, 0x63, 0x7c, 0xee,
	0x0e, 0xcf, 0xeb, 0xa5, 0xa3, 0xe2, 0x6f, 0xef, 0x1a, 0x85, 0xd3, 0xde, 0x1f, 0xb7, 0x0d, 0xe7,
	0xfd, 0x6d, 0xc3, 0xf9, 0xeb, 0xb6, 0xe1, 0xfc, 0x7e, 0xd7, 0x28, 0xbc, 0xbf, 0x6b, 0x14, 0xfe,
	0xbc, 0x6b, 0x14, 0x7e, 0xfe, 0xda, 0xe7, 0xfa, 0x2a, 0x59, 0xb4, 0x97, 0x32, 0xec, 0xbc, 0xfe,
	0xe9, 0x72, 0x30, 0x62, 0xfa, 0x17, 0x19, 0x5f, 0x77, 0x96, 0x57, 0x84, 0x8b, 0xce, 0x4d, 0xfa,
	0x6f, 0xad, 0xd7, 0x11, 0x53, 0x8b, 0x92, 0x9d, 0xf6, 0xab, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x80, 0x23, 0xd9, 0x4f, 0xc7, 0x05, 0x00, 0x00,
}

func (m *Protocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Protocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Protocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastUpgrade != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.LastUpgrade))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Binaries) > 0 {
		i -= len(m.Binaries)
		copy(dAtA[i:], m.Binaries)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Binaries)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpgradePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if m.ScheduledAt != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.ScheduledAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Binaries) > 0 {
		i -= len(m.Binaries)
		copy(dAtA[i:], m.Binaries)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Binaries)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Funder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Funder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Funder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentCompressionId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.CurrentCompressionId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.CurrentStorageProviderId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.CurrentStorageProviderId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.UpgradePlan != nil {
		{
			size, err := m.UpgradePlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.TotalFunds != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.TotalFunds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Funders) > 0 {
		for iNdEx := len(m.Funders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Funders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.MaxBundleSize != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.MaxBundleSize))
		i--
		dAtA[i] = 0x70
	}
	if m.MinDelegation != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.MinDelegation))
		i--
		dAtA[i] = 0x68
	}
	if m.OperatingCost != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.OperatingCost))
		i--
		dAtA[i] = 0x60
	}
	if m.UploadInterval != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.UploadInterval))
		i--
		dAtA[i] = 0x58
	}
	if m.TotalBundles != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.TotalBundles))
		i--
		dAtA[i] = 0x50
	}
	if m.CurrentIndex != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.CurrentIndex))
		i--
		dAtA[i] = 0x48
	}
	if len(m.CurrentSummary) > 0 {
		i -= len(m.CurrentSummary)
		copy(dAtA[i:], m.CurrentSummary)
		i = encodeVarintPool(dAtA, i, uint64(len(m.CurrentSummary)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CurrentKey) > 0 {
		i -= len(m.CurrentKey)
		copy(dAtA[i:], m.CurrentKey)
		i = encodeVarintPool(dAtA, i, uint64(len(m.CurrentKey)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StartKey) > 0 {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintPool(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Config) > 0 {
		i -= len(m.Config)
		copy(dAtA[i:], m.Config)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Config)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Runtime) > 0 {
		i -= len(m.Runtime)
		copy(dAtA[i:], m.Runtime)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Runtime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Protocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Binaries)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.LastUpgrade != 0 {
		n += 1 + sovPool(uint64(m.LastUpgrade))
	}
	return n
}

func (m *UpgradePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Binaries)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.ScheduledAt != 0 {
		n += 1 + sovPool(uint64(m.ScheduledAt))
	}
	if m.Duration != 0 {
		n += 1 + sovPool(uint64(m.Duration))
	}
	return n
}

func (m *Funder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovPool(uint64(m.Amount))
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPool(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Runtime)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.CurrentKey)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.CurrentSummary)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.CurrentIndex != 0 {
		n += 1 + sovPool(uint64(m.CurrentIndex))
	}
	if m.TotalBundles != 0 {
		n += 1 + sovPool(uint64(m.TotalBundles))
	}
	if m.UploadInterval != 0 {
		n += 1 + sovPool(uint64(m.UploadInterval))
	}
	if m.OperatingCost != 0 {
		n += 1 + sovPool(uint64(m.OperatingCost))
	}
	if m.MinDelegation != 0 {
		n += 1 + sovPool(uint64(m.MinDelegation))
	}
	if m.MaxBundleSize != 0 {
		n += 1 + sovPool(uint64(m.MaxBundleSize))
	}
	if m.Disabled {
		n += 2
	}
	if len(m.Funders) > 0 {
		for _, e := range m.Funders {
			l = e.Size()
			n += 2 + l + sovPool(uint64(l))
		}
	}
	if m.TotalFunds != 0 {
		n += 2 + sovPool(uint64(m.TotalFunds))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 2 + l + sovPool(uint64(l))
	}
	if m.UpgradePlan != nil {
		l = m.UpgradePlan.Size()
		n += 2 + l + sovPool(uint64(l))
	}
	if m.CurrentStorageProviderId != 0 {
		n += 2 + sovPool(uint64(m.CurrentStorageProviderId))
	}
	if m.CurrentCompressionId != 0 {
		n += 2 + sovPool(uint64(m.CurrentCompressionId))
	}
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Protocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Protocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Protocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binaries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Binaries = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpgrade", wireType)
			}
			m.LastUpgrade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpgrade |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binaries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Binaries = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledAt", wireType)
			}
			m.ScheduledAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Funder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Funder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Funder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSummary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentSummary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentIndex", wireType)
			}
			m.CurrentIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBundles", wireType)
			}
			m.TotalBundles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBundles |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadInterval", wireType)
			}
			m.UploadInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatingCost", wireType)
			}
			m.OperatingCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatingCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDelegation", wireType)
			}
			m.MinDelegation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDelegation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBundleSize", wireType)
			}
			m.MaxBundleSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBundleSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funders = append(m.Funders, &Funder{})
			if err := m.Funders[len(m.Funders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFunds", wireType)
			}
			m.TotalFunds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFunds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &Protocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpgradePlan == nil {
				m.UpgradePlan = &UpgradePlan{}
			}
			if err := m.UpgradePlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentStorageProviderId", wireType)
			}
			m.CurrentStorageProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentStorageProviderId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCompressionId", wireType)
			}
			m.CurrentCompressionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentCompressionId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
